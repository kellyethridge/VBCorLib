VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "RSACryptoServiceProviderTests"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'
' RSACryptoServiceProviderTests
'
Option Explicit
Implements ICategorizable
Implements ITestCaseSource

Private Const MinKeySize As Long = 384

'// all keypairs generated by CryptoAPI on Windows
Private Const CapiXml384 As String = "<RSAKeyValue><Modulus>vWi7cHIntTcrwIoD0zj/fxoJCDfUHtC5xkMe8pJri7G+T6nKs4zRcLDWRDA0cNhf</Modulus><Exponent>AQAB</Exponent><P>5DwRzr4EPAk1NOUSwI/z1yBJzG2EyrhR</P><Q>1HOEBwbXvsrPQvV7C0MWtHJ22UWgwgmv</Q><DP>qQrEtbePM1gujErOJMl59O/5OOw02mDB</DP><DQ>bUFGqXJsavLTaaTidSU4PO4MjqnPBVqD</DQ><InverseQ>Y+XUwMmlI2G63reScAyc9PHvTPX2fwCg</InverseQ><D>o1Ku5cwZf0IegPzBRZ5NeYy6oxJ430V8n4BLZ8G8/N6kRHnXe70OyzwAylPtxjGh</D></RSAKeyValue>"
Private Const CapiXml448 As String = "<RSAKeyValue><Modulus>slPik6EfNCiN2MwhFHngEOqqRlSXeBjmKoLyMVgLCPIQJQqe/BMcyA1gQg4mgionngIgXCMuSOU=</Modulus><Exponent>AQAB</Exponent><P>1mUfmQlTK+Q8sLCCWpsngp7gNc6RANI8mP4v0w==</P><Q>1O77OcIvsaCC6KmemMILqXqm8Bzb3Ud8G9bpZw==</Q><DP>h7L/2fRuAUT4KPm/uCumSWXYEhaJ7xQiqM+SYw==</DP><DQ>fcs1Vbj3ritSSxsx27L/ar9P8hhKd55snpHHTw==</DQ><InverseQ>U7txqL9bAt+BAjqqDfQOAVKTfx3wnAcK5dFx0w==</InverseQ><D>UTV8SEimoiUZu7HyGpYJ4QpMsqyRMgL8xj1Nt0JLKBObONObUBEPAPQKknuE98cM9j/2ufRlrx0=</D></RSAKeyValue>"
Private Const CapiXml512 As String = "<RSAKeyValue><Modulus>0ci216d7QTTKkh2Zknwbqlp/Eva1IfzzIA6JZKSI4lcYWMWKAadU7cJtJ5JKGe1aeMi3Y1CDWCpr8fUL28QEkQ==</Modulus><Exponent>AQAB</Exponent><P>/LakSOv8LQUmt3LXA9kMQPAWGk1l2QrwGFL3/k+T+Wc=</P><Q>1IMl0X1/dOqGbEL3agnvgBctWcQaqC2cTzTp7zJqv0c=</Q><DP>B2FmJuMNeFsgKFdoRCqAmxzn6Fi+UrppDKzPpVO5pJ0=</DP><DQ>gWMwPXJpjefU3EmRljBib9yssgDiMg9DIj6XSBmsQLU=</DQ><InverseQ>/IggsX0boXE6UJoWppUEqw6VT13WXxb8mAds5ebxFmE=</InverseQ><D>i+23mA0Mt6fA3smDoCPMSEroq/uHQk541Q8dMdZVv7JmKBJKk1PCppwISyv7fWKVmRTsnGuEnxZFl4N9IR/qyQ==</D></RSAKeyValue>"
Private Const CapiXml576 As String = "<RSAKeyValue><Modulus>si995MicOWrr2/VlH1rUAhyFMPVLj5PvYHU8P8I8R77kh1ePn66zuJ0jRsMCpenUzYGuVtqgn0VDjiaYjo7cE2PZYESLkKJl</Modulus><Exponent>AQAB</Exponent><P>3wDFrI6eUAh72YxjdZD0b93/a/NEV26pp1c8j5fN3UUzA14r</P><Q>zI0O3NKXCgn3cC3Pe2ZUYEPbQaQDyMdSAiF06L1miwVHu0mv</Q><DP>uQaC/LE4WV8wo0gAHcOvjEG9c2vcAE8pJFcVQG7LuBN6SAkR</DP><DQ>THffOoYvmL0pF3LIweT7XhGAAgYCtChvbAR95BQKJaaPrmBZ</DQ><InverseQ>KTOfvWHp363Cl6r2lXc/gINaRqNo+iWRLeoBa6/vk0Kt5sWn</InverseQ><D>QZ9L9h4Lqvm9s1xEya9htQVb6BPuqAoLdrK2ZaTbHnEnKNEN7oLMr1Ca5zh/E6xXKCmwClWyULeKiYq7vYLUXhaemtT1rN9h</D></RSAKeyValue>"
Private Const CapiXml640 As String = "<RSAKeyValue><Modulus>vqS9CNxiRdSc6x3nJOWnPi7gVA4Vsnhd8cTAaMBKuvI0FRhhDsTRsjr8PeH4Y7yMg8XSucr3I8jkYgapBW8s5hmSvdWZhPHRGEe1MiEIeMM=</Modulus><Exponent>AQAB</Exponent><P>7Ojjp/PqeacLRM/MP76wDnp4k+BpUSbitNwkPBAxL5KcBFVwhp+YVw==</P><Q>zgFxY3BFx/ISEciI3ONux4iXd/cIwxrmq9CS3tBIecHTq0JgjXNPdQ==</Q><DP>TstCdGjOsnlZaSCHuSfN3HLlSaGYxZHeUvLo5kUoZr8nPtW/4DaSbw==</DP><DQ>DCIhn425TnF/hvScuwXaPH5bDYHLTlKDS5NZUy5JVoKICQo7zZkBEQ==</DQ><InverseQ>Xhn+9dXsK07s51n6SyRs3wRJEPwuIaNDq5EQJUQNb2Gbdb4HgdpM2w==</InverseQ><D>JhKALeTVO1zaeZnfL18tpx11b1PgwWOIX2ALjN/aDLuR6ySTPX/Q4I6zBOzVa/KB6VMNNk4abIKUvOp6MBNYIMRMK8veaIJxYrn+JAOShwE=</D></RSAKeyValue>"
Private Const CapiXml704 As String = "<RSAKeyValue><Modulus>wbclY53TAIx2E6uPkYeYNVFPYnHgLDJGO1ZoSQcUm6ccySsJvVWAP9TWLIOTjJh2zaQn5gore87ONk50L/+FMZ5uaNrbxxPCxORBLzBofFaEbFxEfu9g6w==</Modulus><Exponent>AQAB</Exponent><P>80o27emwkBtzYHg/0yoYjwjcgqhtVSktbZ8IZ+tdBEbt7gtnpyDd3rpTjc8=</P><Q>y9XqvMruAcvSJjV4rHnCX5Na4XahLhbrvuSsATirpSV+YaD8LrTd5VHwfiU=</Q><DP>aYoSVhcAPyOJY5oGpgYm7TW84vlJpJ3eVSWeMeaKTWavpIpSBtBdL1fJE0U=</DP><DQ>DDbCPRPP1S24Zu+3TmZxXja/MFliaReYgrTDFcOmjVvEyebSlZ3i2fXh+j0=</DQ><InverseQ>O9RaZjZGqG0stVjpDDUaHGk9JNbFChHL9KQ3Kyb6qBLmDNvwobxPnHY1+k4=</InverseQ><D>Wfgbz2Zvp2OVO5GEvoyBbtHy0sAc46n94HVDPhehxKEax3vLrDnXtM2/IzCxXibWqBBmF8tw156Yo4Av2/EpGxvolidOpTXVxNX4aCb3dy05VQ/6WEem0Q==</D></RSAKeyValue>"
Private Const CapiXml768 As String = "<RSAKeyValue><Modulus>3VQEd4kKl0vQG/OzLDTVcgVqaBG9KAz6NzJOu5a6mlHOYSIG5ybYwOJJpXDzZuXewBChqQNpmxgGAae/SuTy+EDQNzAQ+mzeYrEaD6C8vqwMYVanRcbNYtDC9cxAH6Ef</Modulus><Exponent>AQAB</Exponent><P>/UKWrRmudV9RYnelAK2QqJ0DSE/oKHgVtHQ2AxyJueDnMelyzVrCv7ICnL1ymogp</P><Q>37j+EpSqJRP6JRyGMDXG2mj5UXnEqgqeYXaHHNHNYsFcZWAKitRt8uUQtLz9k6gH</Q><DP>fLkVYUwbeZwmhVqsvOe9LPyeSDdp+rwg3Ey66M9eGFdlJFR2gCFpdWRiGvTFgsr5</DP><DQ>1PuxbZD4NdpB3si7+vOHPvCGwgkRr+vyAcksMcSOKgD47E21W5uGnKFz+Qyev85L</DQ><InverseQ>dnez9inW0taRSo0QzoQ3CNGTfm9qzh9Mlx6GKjnyzLLBJ87cOfzW2qVksBlmkDJx</InverseQ><D>RK5ayIFFQRfsl4/zTMeEaOKXV34Rtcj5KIG6/ulSNKsoIOo/PCHI52oRMn6veYHhHrKclBeqtAlqOJG0xrEy/ZjorBJnCB/ZSoPPuS4h7budjF2zYiBHJkRwZcxhe+nx</D></RSAKeyValue>"
Private Const CapiXml832 As String = "<RSAKeyValue><Modulus>wv35yrTrD3gjLxJEJ6HMOJsUfshcCZKGLwlxZO42TlAHK90vJPT0Q7SekeHqSVi1DJ7AAB7XW7MqoSE4SKVVioQQZSFz/HkA1fklTOaubfwRwv0vy/A3js1xPhwTs/SbDpNlXMoiEAM=</Modulus><Exponent>AQAB</Exponent><P>87j8swLApJhpXG4kXLIN86xkdbh/ccqGlpeVE1EGC0yL9OJhbkKC87nvhmQZKMRqcreaAw==</P><Q>zNCRE+qsVtVPD5o8Kf50HFdTQlZY56IA3DLRLHd0qkpNkrCP3gPJNNhwt5kqewX1dlzSAQ==</Q><DP>VXli5kTo2tC44rmd9wRa8EJdWQvDZlzoppeyqHuZ6wyFaPSbxtd8pY1n+3HPgQShcGoDkQ==</DP><DQ>QK6JcqnFHXMmEb5ay8RRNPYbFDMixpwx+1iNGKbtEC6BCxd5h9rYOzkzd7gGY23BVE0CAQ==</DQ><InverseQ>FMqDOpFyGkiJ74uTwdqFABR9dBcN4x8rpYw5trf5DBOVC1Desh+mRDAZwKPVDLCBpqrg9A==</InverseQ><D>YuJPUbfr2J1xIkbeH0cS/MXQX/cVjZkrySC9y5RuH8q/yEPTy6cZVFh9bbemi2mb7vl2nfWO+VXLN+3OStN0SU3/2XQXfhZm4dqk5iU+R5n5g9kjPBNLH8DIWYjGVgCvBqH59DHhLAE=</D></RSAKeyValue>"
Private Const CapiXml896 As String = "<RSAKeyValue><Modulus>nNiWWLAg2htBUkoBD7DTDIALapuiIt45qHJdPVbRQE5PXTcJUJ2SAEHCtQYtIeQam0WL2D78PIfAf8hGFx/72Ghn9b+NcZ8b7UHTdna+5O6aBOHyaD80FOmyfEjAjI1jS95XnGlqoD0QaDpkk4xnMQ==</Modulus><Exponent>AQAB</Exponent><P>zgkddb3AAG9p8LeF+TbcJ2Q3xvvODITJRmUe55IDOb/BhRF1/JTuCAeuHiOtVWKuxcmsJp464Bc=</P><Q>wuG8338Tyk658L7cByQVoV5/AJx+5RKN6rO0CGrPSGjOkIPDyNzwgpmotelo+NiTEiEiNoa49/c=</Q><DP>Dgl+8VOhLiZpEFZgkU8UhraEOlFTg3TUhbBD/8Dp6VhQJfG/mRrIcNGdIj6KA6Q6hg0sZmEnX7c=</DP><DQ>MuxTsz78h9+8fKkSy5blRA5yN1GtYuRPSyX8BDsMwQoJ9/9GWKVK/4VxbV95e5T0EUexLfhUOw8=</DQ><InverseQ>NbWl5XrJ6hxvE8gpRcj2oc+hAUT96ej6eysD1JTQyV1eKzc9+Mpaoo22tGSrR52s9EZRqHWmKxM=</InverseQ><D>LGd9GRq0EkuJELz20/Rhq7ZMhSAOpQR5GmFWWFlN4IDLIz7DmlkhzoTPlORsvp2Pksn7r3sVeiUbL3S1rXfIpwEjeseHfBYR54d6EqmPABqPj9UoADXDoYA1VYz+Ni2uFYlMC7Wh4kzlT0zYRc1XKQ==</D></RSAKeyValue>"
Private Const CapiXml960 As String = "<RSAKeyValue><Modulus>3nb1VtiEuSii1rnDR+yrarcAHDlvbgLUTJGUvuVEMcvQ3vYNNabwBsM46X8ab78Ac2ZBk2jI2S4736KL2S8C2e8rXva7Jb/j+fyVt6N+NrI3dkNE2NoWZ8VM+rUEdKNvPANbf6n7hvDVfJLCvdCctdtEYACkujsb</Modulus><Exponent>AQAB</Exponent><P>/nWeSPagl8TOHzSKB+CRx4MbxOlIR9RNw3RAbBZq/1r4YZtTvvSutV6e1/2yIWYblHPwiALb/FyB4XUj</P><Q>38/Agt+WwnMNeyv4ngVk0r6ffValkVCMlbPdueEqEXCFqOguTvnneINg7+T1Q1YLPXDtjR6NFGKCLG2p</Q><DP>Kebkcc9rEpLt/mWAdVudpeUJJZvksy9avtzd3u6yH+qzDB+v4roYKvWx4o98TdOqpv+QlFUkNKJnIOFR</DP><DQ>SPH9XKpjCJ1XF34NWfOIGOfoM4G6FNKb/27QJXUtsOFrrtF9xl/NAYpQXd/R0FCK+UuFISmD8dDpfHGB</DQ><InverseQ>9YlJCPfSUw8ZEauBdt9hsAybMD20we2uoNdHdDRKvdTtK8m6spS4ohG2ovzfRkiKSxQVzB3jQoYcK9L6</InverseQ><D>jrmHQYZ78Ebv4g8gCD8A4uAxg+odYVkTV2R3J9nzXHdEtCbr5qYJjG0nUDapgVPrOB48qBQr95o/84RWPdIz3I+Jzpme1c4FpWs1/iXAbA/+xnzDGtXVTnJrMfkOsXt2MYBF7+f7zWGNlOGs+zkt/fP/jeOu76Nh</D></RSAKeyValue>"
Private Const CapiXml1024 As String = "<RSAKeyValue><Modulus>uNXUqvMdjnmd36IS0Gr/lTAp63mZqoayYcN/YHnGs82eVrEWS5vAYqPWx1488BhUBh7kHvVhP5kkKh+i6pfLKAEssy5jnw9h09lgCClBHyntqFT82AlmiaFK8uVkV8rCjDol2nBpvVgNonF+JhQyexWTEI94Phjwvj/6yZRqaLM=</Modulus><Exponent>AQAB</Exponent><P>3GIqx8V+yrPI8jsFd1NYTNxJjodtLNufqmYbn7q6fIaPEdC0QG0fcfYPREfKka8xpZ4K7mqgLjm0ivDWi9Y5Iw==</P><Q>1rTxeoBb9aQcoGLhUEeZQNhY+JhhrGsMtZH4fPxy/30JUtggQmZRR12XdjBZ0KcKmsOMbxCauYD8Y6ozFhKzMQ==</Q><DP>lBMZb3TRRl0aDTd+6rgDQlFY0v1Ha7Z9Rz6oHOCX4IeApZW3JvqrACU2CMi74Lr3/rF74smdqrF3D0vWu8pKRQ==</DP><DQ>SBWZ2UoNFcySe9qW0PAo6Nd6D4SBjnSmYLNwXO4Y4eQl5DWBpylY8n/eoSSckuvyKIGsvYEyoUNH+WIkIq4GkQ==</DQ><InverseQ>M3KkaBwusTLiKBlu048fx1WyRfLLEa7clsU7a4JN5wZ66h7wElKj77r9BCXz5UZFo4j3AiBBC/701S0mVQYXOA==</InverseQ><D>NVIqaa58xk87RfphZxKW7JjaXv3TYKg+6YkWQ+Sdd91HYkbv4Zvq4gnVuenrtm+uPZ3HvU6YYVpyXlyGCRsFFeXMwJ8Y7zrF6KEs+6hJ4jqBELWUoEPrzU4889v8aIoS+BCMYptpkmzvxjfEWdTPbqjd/tJ25ObbavggoST6ScE=</D></RSAKeyValue>"
Private Const CapiXml1536 As String = "<RSAKeyValue><Modulus>1bkuWuGsKLkvSvrYYhOPVD37bARRUw0U5/yRCjam50+gLGKmxAjzaRjhGQUaaeC2S5DioGckqiqr1zkfSLyQ7KQte5oynxkTdT0QCXHJeVWgOWAknX8sNrAVNt97LOrMXXYZ2JsYMmYiVNqJRTaURWXxdJ5XibXMCRL1pfHbwnL4iqUge1tuiQbFod//7pjl90TukIutHVEyf8BFn5LRQJI4xroQdMJg0/vvRSp8jgy0LoeJ8LkTG+RjUe3XsgmT</Modulus><Exponent>AQAB</Exponent><P>8Vz3+1ixDfMPPNENDw17Rmdt8IRM32fRBJ/TX8LYfVkxlCB6m25Pd4SxH7mcdF1sgD3qgC+uKekJZb69Q0XE/CoJxPD6mYq0o4XEsz0rwy4NU/u//YpxZp84v5cDKEoR</P><Q>4q8eodQoHbiuBH5f/WelCnm2Ym22AmFIEIWpwKGY8MlnvpK/pN+N4iXrkeNv7OVofOdE7g0lw5cTbDMZV2eMyEIYKUi7YOXA8TIlSdTuDqW/5mPg0inqNLEg2PZGahVj</Q><DP>lHw7Wve/RPOpBiMdw4rpsfBjZDogCLiXkB67LQhzovnCVHx+sSx12vNY/El2BOiMnYB5yY6LuODSlTN4v/AmNXOvOud9ZAQ/CPJ8hkA1sgecz3PrMxF+nkGJ6eP/X0Ph</DP><DQ>p2cHyh6xGXHfIPZq0OqPmTLVG89FkHBjFcB/4f/0wC0cbkJVQN7PGulCFFTPvTSVe1gXMW2IK+8PquH5nvCbqPAWg7ZwmlhRqk2L+ABFZY/GLdAooUvO5+a/CTqmOYVd</DQ>" & _
                                      "<InverseQ>x3EJeS7EP1h5zuKKITblv0V9R3z6KEQAbKPp3zfckHX1fvuR+3VP4FLU63D0yxd2BOjhGTvyJvjrVSDCP+Ndk+h7ZT9MkzW/i6ifiHG/5L/xaEpxjJGq35OOOuHqCmKc</InverseQ><D>rtTUab3QImQSnuiCmABeMFCf2qXRjPnXj0qZr1wzvmbxpT1yJE0aKXATu27kQ5ZyKXC1IvgdEyLi/aWZxNuURjCrkD/8hw9xTmeMNd2iLaJw9l6CtV/x4C68u+2nCoBq/Gv/ht9RqYRS6ODUTk1aOL1mPNSHT/MeFNK+06lyQNSaf95fMxGPIcnnJ1vtdkHgk2vi5ALSQf5tGIgVY1EFr55M9ABTg1p98XwIQgjIxCZcL4BygfMk1YbESaQFvzth</D></RSAKeyValue>"
Private Const CapiXml2048 As String = "<RSAKeyValue><Modulus>9TFEYeTahPGOXtcRZrLQu1gHm875jv1jgxy0R9V3E/vDyEhNbsRK76rvEs3ljw6spQBQE1zd5wfUvFnhVETOuS0z9aXSAljxSIbyhkL/jT7/4vHEHe/GnBQZPdvJ9PtPr0ssLROy8xcsUEBDwxNRPNHSpmub3FHZzHsoMlJV0cOGmn0qqeMuMrP8zVDycXhXZNsn8v5RPC38qk6VDHdCqGz/90IRYonpFr5my9LaguJHVNCq8BRVa1oJkDtNUFhFXjVHnmxmhS9Mqm2obEpTp/jUk+bRqnygKB3up9OGYdLO1rAv2IoH/K2sxcvnedDzieRmPE/9Y9JBP/UvM+VULw==</Modulus><Exponent>AQAB</Exponent><P>//j7DyPW0E5t1/xvT9iojXQZfu9t/t0bdJMkRQVAYzJL5+UUILOA+70hMtPIvrU4gdeK0CPKfbbkY0UmD4QTb9nFq4aOsHruMZgWIeqHLlEo+VOYX3+hLv+p/aXX+Wj5PvQWLYZBH1sdOLE21nEVHFXZIVev3PcIYU+P0L8R3JE=</P><Q>9Tf9pWu4aWF16h2/nCmY8HAOPNMgcHoC6jtVuJJX+8pio6VLbA862e6ptB7fZdCDDXB2y/52tmG6uAcmOIqUDZB4eLHcOWxnYctcWrvjODMIABno7EuhR7zemelN89ME97zuY7nQSnVRroWD7l3oU5pN3yIe9Y5bnMKgr1nnhL8=</Q><DP>e4AhgZiFGFP+42rEOf4KtNUDSB81LvZ3PLORmEuEWVf3D5eTMoPpA4yo6+EKxhihfuQD8ZCTLjyDzPGb/3h1+E1V9gAh8DwfmIYMh6ikOFCoOEOBDPKDTi3EUsElhwyC1UDnQme4G+zWGHhIQQambNluvYuVKkN2I51Dgi/t6kE=</DP>" & _
                                      "<DQ>ZIzd9Au0pXlyOVqTbDxeWxEHtYc5AQX21gcYgkN30mZNhh7MS3X/QserTJFwNzaF1mfsPn+MPALc5oL/+CVSyjEYRR1hWSaLSb1ylD4A0NWUDT6SlPn6GwlmGaRh833uxorxEXFq6G0s3iwfSgm1rzpRfhJmsXf7Ns9TxjNOTM8=</DQ><InverseQ>uGCs/TRjtVGBXsTV/9fPMMel0L+WbrdqIPu1GBSIiXk8tWWi+P1lACSTf0iCJ6SIKB26N57zAE9r7zaocVX0R/3NJ3+eDDztV9i6AOsK6X/AitxXetPQDIflbbjAEzeZUUJf2onSAITIw6TaAs620a8HpPw3W7Yd0Oe/lt2M+GA=</InverseQ><D>ao8oyuqs1U4ts6YAWAOql2DgnaRL7QrObrLQ3s802yh1o9tYW6VPc+1zzVZSR+P2wBbsth2MCtXqbJkbRoZI2U194WpZZM/GvOB5EkSXz4jrqHOt6dzFEhviBHI6yQ9XSDWBU23WPbN6fL4RNPx2N9pwlAb8S7n+z9FOXOBPj8NyMMtykGqgPyHEAQnuhfLuf/J6OGrHX8dzsZAo6o/bnk49Rv0C6nijE74TeAwJ36UuI9Lw+h6hwtSerEN6o1vy6mIjrjdDM07mKKUMFwkEhKJc6ckBb0xVp/3VRlJb1ocYQHbfjCAPjecR8OVfjaIy9WPMj8WXHegJpiBugWK9wQ==</D></RSAKeyValue>"

'// all keypairs generated by Mono on Windows
Private Const MonoXml384 As String = "<RSAKeyValue><Modulus>i9COhlY/aGJD+B0fjUtOR+bbDkKyrwDzXzvwbBE8TJmtFYNrjfLHOj/gjdKCEcqb</Modulus><Exponent>EQ==</Exponent><P>tJ2yzv36kToJOy2vURzL9X+W0YsKiHZr</P><Q>xitaV4u8NRFVtIuFvYWArakoLHFeUiiR</Q><DP>dN6CwiveXfhgU3fp6TDANXCs4fCOWEyf</DP><DQ>aOnGapVFhYGl2A2hKBmAW/AkU8OMSZ0B</DQ><InverseQ>bU13UMhy7nsqfFtm7AhyjkJT4GCd/OPT</InverseQ><D>GKxVYwApTqft4H2cJ/46/aE1tzjyWx5IzfYoG1Qmnzr+u1/rf+EGkyIzGWIEcyXR</D></RSAKeyValue>"
Private Const MonoXml448 As String = "<RSAKeyValue><Modulus>rGhbXQawiO5muvnbq7FuVZc3QuFp2CZNqHekmRA/fdUzmUP6jFH7usaVh1kZ+Fk0em0fJzjOYgU=</Modulus><Exponent>EQ==</Exponent><P>rp5tO6WKHonnIRHxS8e566iNe20quz30u3R2Yw==</P><Q>/MIc/2TV6WPi9ddM5NzLeaukuv7pmZf/VfFedw==</Q><DP>j83DXkwXZHGRKksC8xzzdscLGlnm9I1gIedwjQ==</DP><DQ>hdAteCZTITThkTW/S/xruOJmROFOfn2lS53mtw==</DQ><InverseQ>L0fk3nG45E5WbtKkFODlQjMQGIdSEwlsvt/TYA==</InverseQ><D>ZWqQGJqF9jHiE6IIv1lP9hy3GEhcYQd4+a/KOvAKrWm95W6eF+aDWFgzao9lR1/BLP86HhcucSk=</D></RSAKeyValue>"
Private Const MonoXml512 As String = "<RSAKeyValue><Modulus>jq1Bst+LWM5ScL29w+C/GVULDAebcT0Kl9ERGp/I2A2qJ4jHuzr7ltoQqtVGRquQwwDZQ/o1fH99bWraz5Fi7w==</Modulus><Exponent>EQ==</Exponent><P>1O1TVs0UsUSx7Vjg7H/nJnZyfteeLNmUSAPylutaXmk=</P><Q>q4nwfMxpskF8TIRVmcTl1yHcu9rlaMt50Tb/skhFu5c=</Q><DP>ica9dGaU6yxzIRtkXMs7NwFZJOXe0bn2iPN+2h/RD+k=</DP><DQ>MnPdUeHEu/Ukjvm+0t+O5OvXgous4pYy4y5LNG+cCf8=</DQ><InverseQ>fAvQlMRGT5B/FPjQBeArxevr9DN59L0JfhN5qO84pLs=</InverseQ><D>bRsUH1+my3CZZUXNWY2/T5tizPbCKWrp+5/f5y7k4XK2d7xCN+qSZxn+nT0patdhewBMFOI9/xp5zD4U/seSIQ==</D></RSAKeyValue>"
Private Const MonoXml576 As String = "<RSAKeyValue><Modulus>h18QgR8YiVXKVmcTRuPfHljm9Yz5vPt9UXg25GU2WztihEihEyZYMJaRzEb8/iS7eGg7jLXW8SrxhyLUnXfgWvtn/9uNGinj</Modulus><Exponent>EQ==</Exponent><P>x3NP/zn0CxxHMoce7+3UbMtWbtZCxxZZGMID5OCJKGeJUYZF</P><Q>rcC07OWzbx2h827VnJlAWlmxmRRGIaXFOp10tNG8C1bE4GYH</Q><DP>UiBsO+qvyFbwI91I+WHuDq4Uh/3fQusVoMhb9NTtLsE4ivsN</DP><DQ>mU+usujLgCk0i3/pqEr8i/TJ4Ww94XQmfwNm+eY8gnm8xf+r</DQ><InverseQ>KqPD9+C3p6VF6KLOhkyEOLtBlImFMY3kK79+1bmJLjEdyzUH</InverseQ><D>b3t3AOxujzeXknMA0Pfk69C+M6FGIyl2Qxe0vBcdtItCEpYpGKlxv+l1rPu1/VOy4F8Q3u+5dMuhc2OlLfX7F6WkL5+dN7pB</D></RSAKeyValue>"
Private Const MonoXml640 As String = "<RSAKeyValue><Modulus>4YELOUiQPs7Nw6AM2m14LxuKDk1dXGYhvKczD6mB2//U4sitp+MFReJ0ot840hQNwwCssw8hyyniFqIvSjKJknv+HFL4Lc3AyCP3pL5iFf0=</Modulus><Exponent>EQ==</Exponent><P>9Q+nEGCtAF5MIk3lFGn0YtMYSYGM9JI2Ai16dS10Dx6Wxeq1bnVHLw==</P><Q>65Ho89urLekWoDLeZb2ManjaLQS7se6A0eM+Sj54cFnHj8UDe0uqkw==</Q><DP>rPv9dPjyltkmrs2SpP9/VNE+UgEYNCr48np0jvLogySmqdLabBaMmQ==</DP><DQ>UyRwVhFLeZ2Pg9W356xPrRuYTB/JxlQtd0ElCyUbcvKCqzZ5swulnQ==</DQ><InverseQ>5OZh1s2cw3Ydxa+abpooyXC08yJwNS9omtFIl9ct2HZkK4EKvhqJvg==</InverseQ><D>rHG9SewyEelwLC8Y40SnMxUPOB0LKIpWCLwX/OsI84dmj04qcVNAQxB0O5hmt5GXswJd1VPOdRmf/YrMiLZhIHFbLgdrQP+gyWGCSu3koz0=</D></RSAKeyValue>"
Private Const MonoXml704 As String = "<RSAKeyValue><Modulus>mUDm0P3S9oPB06NJT5oDFS5+Xy/ACBvGdkvNjCiZo9bOLvVpOsiih9ipWZw9zQInjfP0uhGqDBkl9jw61yEHIqed151b9hkO2cmfb2o3GvPkbXkoMcoxBQ==</Modulus><Exponent>EQ==</Exponent><P>sMV0t0i+ucYTdpvFTL9lzhxTC902auu5vMDf5Q45WAiu57e9WcGNGbx3PqU=</P><Q>3fEKYrtMZmXoL/vf4xnrRDKpt106zSyrwaVnq5vwrQUZGqj/zPx+umBj+uE=</Q><DP>FMvvnRed97zzOyFigX/t3ANVEHRgwUjorMtlonok3S4ysdlhkhbFTlJoYbk=</DP><DQ>nKolct6QSEfvMO4HcyFaxrpZrpwpgcUt8hpnS/Wa1HwRuHdLJ0jR7Pi/C3E=</DQ><InverseQ>Sy1FwjQNv201hd5uEVIDrxuCXHAnCA5G8p2XDTGee+mlGnMqFvrNKdR57VM=</InverseQ><D>WiYta+CaNqfbbW8cELTywSpodDo0uXnACVnENFQeJCQA0FQfyDnJBJ2Qy0vuhbaAbz2qNXZcYp6QxbeBQQZGEB//nahkNns7KxKXDEFMMU1ghU9eoubr8Q==</D></RSAKeyValue>"
Private Const MonoXml768 As String = "<RSAKeyValue><Modulus>pnVBGKuCV1sdnZP7yHMKlMnyc+4MZicSRDu6ESWPKUx/Ab2fbwwOoHDE5pSW/wCGziaEA2Agfwt6YKAr/JyPmcBcHichUjhzjDvExBrdd3jmQ1WjjNzV829+qSEq0kUl</Modulus><Exponent>EQ==</Exponent><P>u3CSNJ8PqWVfZkLnDBKFGk9EhGnY2poXTBR8aWqLDoa/nG1OPB4Zx0CjwNyR5mSH</P><Q>41gBCJ7TC5URUbKIqzfxQKcoDbz45tJ/1/h0nhGGXehGHYFWlNeKDMcqLtPDB5/z</Q><DP>NyEb8Vv1jCzf0shiEpwJB7z2CNPWXmmOYausHwE39Taw06etmTYHlPTk3l79vDuv</DP><DQ>uzlqQ1Wevj6Gu8A0UMSoj5i3ktfcCWIO7hfnkTub1N1m6x84PlcmZOBA20T69zht</DQ><InverseQ>sJSC1ons7852EcNt7Cctp8ryAvWZxndAz2/W5vcLVi4sk5+6EQ8Kfyw66hYNPvTO</InverseQ><D>kt/uJNORH+b8A4KS3gsndDm3z7Ps0prx//h3ABIU6DRwEJhBYfuUb3KPnkbflbUqONprCS1FlC0mo+Hxald/r99a5PE3JWiVTN4GHuZ3zYEviEvRtNsOG7XYKydTUO3F</D></RSAKeyValue>"
Private Const MonoXml832 As String = "<RSAKeyValue><Modulus>3dVclQYr1ks5x8VXLcO0H0BRNlmg/XT01IFso0aQY5AwU/kFbDUwTSrmSZCuRBk2blp14BYvpwpviuP9WkIcjhTSuPwPD1XWSl33WHSWEc6uYEHxjn0gieHK3SiyVAgOrcVXtOaNJck=</Modulus><Exponent>EQ==</Exponent><P>5BX1qdEJBAhdRC3YXMur5Hs2AfznVNExYbkj7wrK3qLxpQOLQk+TSk8PzWFoOx4xnDG98w==</P><Q>+PuDZFrHTTsSLXrrbS7PhQTWd5BHEqVifUttqI+YSx3pRTxFmfulj5m8uccDE775VrUwUw==</Q><DP>KEAcSyTjeS6nDAgXH288c51FxB2SPCTqmMZRoqeNNlj9d3kYkzs4HCwR2PMSZMkX0EUDZw==</DP><DQ>K/AmPuLX4HPWCAaiBDVv6kwl2N05t/8RYWep8JHPlMkLDDfQDB1Zc7G35IyIEosc8S8Ihw==</DQ><InverseQ>p7fE4OUIq/uvESb5mExGPNxh7BZBLQ3GRxq67QvHhhhaw4KAiISMk/MJY2TxD+DZ2F25hQ==</InverseQ><D>aGRnzaiNGYzP5YoK6FwYhy1TZN7iWSf6vlsF8nuPPemAJ4Q+yYJxFUFdT8udTTkKjkiv8BrhBpTUlAjP9ge+BNftSibZ4zp8wd1pxewIPFYnhimAVIFasWv/1NnIP8QwH0bQQOshCxE=</D></RSAKeyValue>"
Private Const MonoXml896 As String = "<RSAKeyValue><Modulus>8SR9zUf+X33JO4Gen620JE7yqQhvP0RSnU+XGE5fSHTPmy/HtuP5/IsCbfDsKOa5aAa4uj6PpxsG/6GgrbgmkxSfJmj8OfYP7Eo7wjXheJmv87Iw8y0rJ3PhkKbF82GFU/CmYQO3A77QVK74v9NMRw==</Modulus><Exponent>EQ==</Exponent><P>+q7kK0s1I10ZVAXqqnTzZ8T7L+Q82UW658IUeH1aL8OteL9qbh/05vhqknbptbZ6Xjsf9UtoTT8=</P><Q>9kHMYmw0rlmWcxQOAnTkn1g6ZCyMDR05Yhvf7qQtbZQ92GKWrs0+MTl9N+RkYREqhskY5S5TVvk=</Q><DP>hLbxRBjBx22F4TBPDvKe+rOUCkunvlIXp984A42oN2eYEr+w0OO947Cw5CDWFOgiqluJY76Cgz8=</DP><DQ>n1fAe+upnf27s9/M1GnBG8+tT+CW208lIV1UqXlKkjK+mxKdvGavxX+NQkh9L7/QORi1wXhUCxk=</DQ><InverseQ>lsGlEhb8TteuqHjnPULwYF+naVMMThqPa9+sAMflXAHm6zQ7YB6JotrhnSnSVdxuri0bhZwbMt4=</InverseQ><D>Ko34FSrSiVJuzkQM7wCJM5V2HdRP3fz/hSwpuP7FhUHKSI/2ETdKO6APfNAprN1sA0x687Cv8E+4mTmZ7zr/6qhiXIxKO1CYJIssptb/IfAC9McjnXeRfvn7XtHwprzmFRCfTE06ZPWD4QXJG22WIQ==</D></RSAKeyValue>"
Private Const MonoXml960 As String = "<RSAKeyValue><Modulus>tsPl3wQ+EYH4tuzDokt/CknZUVNZMr9AEwZCGMzpXORmkHaBA5Dh5N24OtQwO1YQ4gXCosU9YpdQujIvki48txiL+r6/KtK1hIOm4h/LCZRZ0ztYZvufH2ysv6Sv22iEbv8/ABOmaAu7A0RueGI1dX8aZ+dIlqzz</Modulus><Exponent>EQ==</Exponent><P>1kRCrCRrHd9STbYjSUZ0bD/Sqcx44aXwEjn06z6starjsKQ/RAboA/VCalDWlA66UC8CPQxN2Sd0Sn09</P><Q>2lzq2YjgLtwcQzW7GdAXf5yAoXO7mghh8rgfRvpVtAN6wkTSR1XQXPdXYJRVDYyGyrA5bBOnheotuNXv</Q><DP>WDo5ki0dDEzlp4c7tMKoaM78ZAjmewgXjwjOQr90Ss3lSLwaDPPI8pIqaAMrLefyXUCIc32Jd4i3afdV</DP><DQ>QDlyP/sUwnz5QPGvgBAG6Uwl1SIKACCVR2NUfkmgvHl+dV+JJAouOXXshdFGMSlU0jPUp1ETJ2L+Y4o3</DQ><InverseQ>gssEimyKQEsy0cnyZlhx4h6Ua/owWnlz4bRac6tVYQRK05LG78sAbgtysi/aZ2rXqG6+ZBTrY0FHuR5+</InverseQ><D>rAOrLEA6atSt2VdOtt2kvmOfW5m9XPA8TiQB+TlUGzFReOgA9Ewf5nZTCjEeVfamel/GPtfBTbuXRdTf41eV1Ci1WHuXJ2/ZiN8ob06O0UAjJTlva1RGhOVVBZyI2tJOA2vJ/zPPovcdiReyOeSu3neqYqr3IUVx</D></RSAKeyValue>"
Private Const MonoXml1024 As String = "<RSAKeyValue><Modulus>i+O73a/wy4fMi6V9dF9Us4oyAUvNwrJcOS69r7edDjw0MDd5vz8PcaAdL3BOwMEmItI1i8Z39HxqvuuwdB0GGCNKGh4Ft680nIAgsLugztJ4Shjm+xgFM3cFSGxJpSWkWlTpXs2ARhOSIbr5/+UwON4EvpkYxC5GbRIsrqDHHV8=</Modulus><Exponent>EQ==</Exponent><P>88rUpdL/RNdeuYTReHSK+MmRWnc2S79Z67uHtMIWO0BsG/gMUIKnFSpJiEaFpnHXe881cdUvNvo9NGuTz5Jh1Q==</P><Q>kuT52+3qfpuQ539A08+DiPSfyNHsq2vwOg8vxd3pBfVUyLSPkaLHOmXumk7BDvWAsQXQPOblsgeByunEO1ooYw==</Q><DP>ZGKTy89aDUmfeZEK9V0qKjThf5p/xNZSM+POd5s2VKIOZd6bqK5EzHrS++DNnuOU9r67p1fIJbJVb/APr9Lc/Q==</DP><DQ>ikDrKVhkOuzEnaTxuErWJovhrfLAoVaHvixpMrK9MsjIRG20TNVwNvaGNuC1s7niiH3xKkK6EPgBr+sTCq81EQ==</DQ><InverseQ>N3di8j2v4ZxE0Y/WFST/wSuAvTfTevx3F6I9jjYReUH8Yy88aKoKr+mgRSl+94/glwbCQ3Q+jP79puiBmcRrPA==</InverseQ><D>OZoCD/0m6mUX/UQkmVRuK89+AIigBOAH2097SFqqFOudBMuMe+zKH7pmXtPkMUB5HWWdk+hPgsnRmeiT85N6+kB7xMfgGI5AsJga19OAi2yI3RnXlTq0FMcYHZCvRE8AXUxVQTO7/n3iq3r8TEDaPmcTpn6eooXvGoA6jRCHLYk=</D></RSAKeyValue>"
Private Const MonoXml1536 As String = "<RSAKeyValue><Modulus>jzYjq6zGOWfmpnzDf5SNrSifeYbFFgbh0/tO2UkLWBpbFqHdLo8CZJt1j3UtSN82ZuV6IBMJnmIsxOH3JQ677IPb76Hz/F0V07jCM88kcz3RRtCahXj/14p2EwTY3297yylWx8+zGmpQDPOxejbaGyjn2TyPx6Nq54SVSAfBUgcXuwwpksogwv/neZLyOlu/JBG5Ej11FOfJ8vi7gb/OCqK1EdzRthf9e4FS5KoxC81TiTUXyfesYpSsHI6fQ5i1</Modulus><Exponent>EQ==</Exponent><P>r0edPMfgFzP3gOrrFIS83DteP5B9l0Y0c9ONSdM3il1Gm/NtU1YTmEHAdAaNHS/p8xqO2ojnYLTK7EUADQeeEUnl3f+BYcYkVSOy6Fq8KKJlDP/PUNF97Yp42TgUL2bD</P><Q>0SngrKVGg1QV5paow1TV6IBTaxVflPcHRdkk7H3WkzSz8XGmpVWYumRWQoDT7NwdsMZnvXImlavUX4v0fNqTvHwN1HwTU8g64RFqfePZK48fN3EjIZDKcTSEQxrFdDsn</Q><DP>e7oUo1/pecpUWwAtd+U6BN6c4ZMredc0FYZFnYYJFl/1m0JrSeJoLz14yl76Mrho59aC9Jzfj46tW3wACTKNsdnPb4cuJuY3w6C6heWx/pC/zPDOk2azPkOgmVTC9EiJ</DP><DQ>uI5c1JHUzjsiYgx2yngICWIrfJpjZVJv1DgRhV/5kPJEa6CD+0uGwpTElQhChbMpQaABLrAD7Xl/JyEjBMDctV5mjk9cWPv3t4fWbxRWNX5IuHLiw0OFcvIaWVPbZo6L</DQ>" & _
                                      "<InverseQ>p52gqtyki7MRn0fFTOkSCee/2QQAZyM2cYt3DtgDQbRcqrMT6Q9WXgyXOGdadqFFvUpGxysCQ/rppLttCG9S8wG8lD9I6hulda3TkiKCsYNuNLco0epmjXpWc0YmCcys</InverseQ><D>OvgszjgVYu6MJm+byx8NKS7YQRlgNj8RsaO3Di0iyey8GGDEfJU9OHw/d05d8NRhseYFHEQTBPs/nF0LaZynu73TCFG+0VOBdUwTuvrw5CiDWWT0VRO0pAvWRBEOAaZfiC2ViL8qyz8MYj4MM8wOUMOOx+Oy9LGa9MJOcLSkJKixqWLqxv17PVIoyMiHE+SW2m5uMleT32TVU+Mzz3lec2n1RWRGS4P14EyOf1l8WqmRlMk8jXm/xVf8w9xgbwtF</D></RSAKeyValue>"
Private Const MonoXml2048 As String = "<RSAKeyValue><Modulus>ppiz9wru8QdjxD1IZ8Ouc4rpKMjR51jDq/mPu7gILbto1sD+01r/P84zFd2n9Jbv+vHJ8ClTr/9vh3dy6OzN/ASUoAMzmGnHQPsFHyaZ7TxDmF2EaF45F0rDbsPsOxlHUKkc33EuHwzXRZRdD4c2vCY8D+qrdpldkC4KH4oWjBHPk2MlqM1mPGJIvzz9nANhEl9YHHHZmAV2auZIWMWyO9zPHoE0YYMeFTHIuOZmxbu6iKX0pWcHzukx6FCqxN9zOAz5xl9D0f//0vhsiZUINM4y4ypS9C+jF8WAUthj29R3s1Hxr5I32kr3+nhtkHu7ljqLzYqCBq6hixZEhHlUlQ==</Modulus><Exponent>EQ==</Exponent><P>w5gi5/IS9jFz8tAVpUgmCBBvUCMWG6VmzvrKxf+Z6VQ/Uz3iirTDyMHbjfThlRLik39EbCs2woN9HYeIbEoQRKvbPVewvQZzV6nD5vAIR/wMzL/T14kStaMI7oYUXTBsTrfz/YwNFXPgANV1QEjFMT+S7zGacduP9PG3Kx5dqu8=</P><Q>2gv5mTL6RDAitvOdFoI8Ke/PrQFne1Gx8oKrMBVoRUL9Jzzp4oWlNoDjU4N4USET3KsuR8OBgH8KH/caJC1NuDG+CQ/Bkf/iB82LuoOvaBSAKFCXRMng6LyoDFxb1ptwFavFogTrxPs3GpHYzIq4quhuP18X9bjHkiNzZ3qqCLs=</Q><DP>ihEJlKrgNVAVnFal3hTPjTjHC2QPmwtXoSmAE0sDO0qHDZUYYekCq9QiglKBHe82hju30+JExYn99roF8hYpmeK44AGp7tdgeh17OZpgMtAJCP/g1GDB6aBCikCG2F5qketC0ReQw9lS02l/8SRO9ZZJmcipQU+w6SMX4jONaZk=</DP>" & _
                                      "<DQ>TPUq6sayrqeTyBm++OKr0pDf4rUzlO+oN3lpmIAGrwiVlWDLBKejuOIyHXmx/oQlILTjKGMepdJ8C0gnWA/9UBGOXY0XJHht5KLmBZfjjiVaaJTqGEdAUiR3i+Rcphi+JcQnophTNnbIJ37E/OWqlqxjJWzbR6qgyiqhM5S0e40=</DQ><InverseQ>dYOYJxCnJUZLastml8Fu9/HoW+DoX3OQ/I2b3aRBYByh7dpeRPaMdtycHgSNtMAocYDXMypl+f92vHFXENc4WFtEVAQSkxgD2IWTgQEj92kmaCA8Jrs8boH3eXfLb6ZlHf1fas5lIreq5Gzj/0IC0zDlYKBWOQf/3d+mxI9kbyw=</InverseQ><D>f2W2y/lNTueIhwGv1uDu0NOjPU5GKWH/CwoinpvKBNqbdwwOKSd35X+QeiH46Dcv/CJPIRCLSlnr4BAMlABhSD+88tVFkqs+BIO4n1nBALWdGillQMCGAsCzkPAtHiJjtib39ilfgSfv6ensz6OiU6TEhKRlAFcpbkFTCQ8+axtxer2M3TiaAarE3njI65lgOwmu+djnqDyKWzfGcA37QafIQPOnWiMIgtBWfKetnKXtk1ReqdDw2IckUNBud4EeRStM7jy7MlVNc0TXiTDK7ow+Vd2EIPGpQXkav167V4F4Lc7VYrGDrFTV2fM66uBBcmgaH3gUOVGq0qUttAuZLQ==</D></RSAKeyValue>"

'// same keypairs but without CRT
Private Const CapiXml384woCRT As String = "<RSAKeyValue><Modulus>vWi7cHIntTcrwIoD0zj/fxoJCDfUHtC5xkMe8pJri7G+T6nKs4zRcLDWRDA0cNhf</Modulus><Exponent>AQAB</Exponent><D>o1Ku5cwZf0IegPzBRZ5NeYy6oxJ430V8n4BLZ8G8/N6kRHnXe70OyzwAylPtxjGh</D></RSAKeyValue>"
Private Const CapiXml448woCRT As String = "<RSAKeyValue><Modulus>slPik6EfNCiN2MwhFHngEOqqRlSXeBjmKoLyMVgLCPIQJQqe/BMcyA1gQg4mgionngIgXCMuSOU=</Modulus><Exponent>AQAB</Exponent><D>UTV8SEimoiUZu7HyGpYJ4QpMsqyRMgL8xj1Nt0JLKBObONObUBEPAPQKknuE98cM9j/2ufRlrx0=</D></RSAKeyValue>"
Private Const CapiXml512woCRT As String = "<RSAKeyValue><Modulus>0ci216d7QTTKkh2Zknwbqlp/Eva1IfzzIA6JZKSI4lcYWMWKAadU7cJtJ5JKGe1aeMi3Y1CDWCpr8fUL28QEkQ==</Modulus><Exponent>AQAB</Exponent><D>i+23mA0Mt6fA3smDoCPMSEroq/uHQk541Q8dMdZVv7JmKBJKk1PCppwISyv7fWKVmRTsnGuEnxZFl4N9IR/qyQ==</D></RSAKeyValue>"
Private Const CapiXml576woCRT As String = "<RSAKeyValue><Modulus>si995MicOWrr2/VlH1rUAhyFMPVLj5PvYHU8P8I8R77kh1ePn66zuJ0jRsMCpenUzYGuVtqgn0VDjiaYjo7cE2PZYESLkKJl</Modulus><Exponent>AQAB</Exponent><D>QZ9L9h4Lqvm9s1xEya9htQVb6BPuqAoLdrK2ZaTbHnEnKNEN7oLMr1Ca5zh/E6xXKCmwClWyULeKiYq7vYLUXhaemtT1rN9h</D></RSAKeyValue>"
Private Const CapiXml640woCRT As String = "<RSAKeyValue><Modulus>vqS9CNxiRdSc6x3nJOWnPi7gVA4Vsnhd8cTAaMBKuvI0FRhhDsTRsjr8PeH4Y7yMg8XSucr3I8jkYgapBW8s5hmSvdWZhPHRGEe1MiEIeMM=</Modulus><Exponent>AQAB</Exponent><D>JhKALeTVO1zaeZnfL18tpx11b1PgwWOIX2ALjN/aDLuR6ySTPX/Q4I6zBOzVa/KB6VMNNk4abIKUvOp6MBNYIMRMK8veaIJxYrn+JAOShwE=</D></RSAKeyValue>"
Private Const CapiXml704woCRT As String = "<RSAKeyValue><Modulus>wbclY53TAIx2E6uPkYeYNVFPYnHgLDJGO1ZoSQcUm6ccySsJvVWAP9TWLIOTjJh2zaQn5gore87ONk50L/+FMZ5uaNrbxxPCxORBLzBofFaEbFxEfu9g6w==</Modulus><Exponent>AQAB</Exponent><D>Wfgbz2Zvp2OVO5GEvoyBbtHy0sAc46n94HVDPhehxKEax3vLrDnXtM2/IzCxXibWqBBmF8tw156Yo4Av2/EpGxvolidOpTXVxNX4aCb3dy05VQ/6WEem0Q==</D></RSAKeyValue>"
Private Const CapiXml768woCRT As String = "<RSAKeyValue><Modulus>3VQEd4kKl0vQG/OzLDTVcgVqaBG9KAz6NzJOu5a6mlHOYSIG5ybYwOJJpXDzZuXewBChqQNpmxgGAae/SuTy+EDQNzAQ+mzeYrEaD6C8vqwMYVanRcbNYtDC9cxAH6Ef</Modulus><Exponent>AQAB</Exponent><D>RK5ayIFFQRfsl4/zTMeEaOKXV34Rtcj5KIG6/ulSNKsoIOo/PCHI52oRMn6veYHhHrKclBeqtAlqOJG0xrEy/ZjorBJnCB/ZSoPPuS4h7budjF2zYiBHJkRwZcxhe+nx</D></RSAKeyValue>"
Private Const CapiXml832woCRT As String = "<RSAKeyValue><Modulus>wv35yrTrD3gjLxJEJ6HMOJsUfshcCZKGLwlxZO42TlAHK90vJPT0Q7SekeHqSVi1DJ7AAB7XW7MqoSE4SKVVioQQZSFz/HkA1fklTOaubfwRwv0vy/A3js1xPhwTs/SbDpNlXMoiEAM=</Modulus><Exponent>AQAB</Exponent><D>YuJPUbfr2J1xIkbeH0cS/MXQX/cVjZkrySC9y5RuH8q/yEPTy6cZVFh9bbemi2mb7vl2nfWO+VXLN+3OStN0SU3/2XQXfhZm4dqk5iU+R5n5g9kjPBNLH8DIWYjGVgCvBqH59DHhLAE=</D></RSAKeyValue>"
Private Const CapiXml896woCRT As String = "<RSAKeyValue><Modulus>nNiWWLAg2htBUkoBD7DTDIALapuiIt45qHJdPVbRQE5PXTcJUJ2SAEHCtQYtIeQam0WL2D78PIfAf8hGFx/72Ghn9b+NcZ8b7UHTdna+5O6aBOHyaD80FOmyfEjAjI1jS95XnGlqoD0QaDpkk4xnMQ==</Modulus><Exponent>AQAB</Exponent><D>LGd9GRq0EkuJELz20/Rhq7ZMhSAOpQR5GmFWWFlN4IDLIz7DmlkhzoTPlORsvp2Pksn7r3sVeiUbL3S1rXfIpwEjeseHfBYR54d6EqmPABqPj9UoADXDoYA1VYz+Ni2uFYlMC7Wh4kzlT0zYRc1XKQ==</D></RSAKeyValue>"
Private Const CapiXml960woCRT As String = "<RSAKeyValue><Modulus>3nb1VtiEuSii1rnDR+yrarcAHDlvbgLUTJGUvuVEMcvQ3vYNNabwBsM46X8ab78Ac2ZBk2jI2S4736KL2S8C2e8rXva7Jb/j+fyVt6N+NrI3dkNE2NoWZ8VM+rUEdKNvPANbf6n7hvDVfJLCvdCctdtEYACkujsb</Modulus><Exponent>AQAB</Exponent><D>jrmHQYZ78Ebv4g8gCD8A4uAxg+odYVkTV2R3J9nzXHdEtCbr5qYJjG0nUDapgVPrOB48qBQr95o/84RWPdIz3I+Jzpme1c4FpWs1/iXAbA/+xnzDGtXVTnJrMfkOsXt2MYBF7+f7zWGNlOGs+zkt/fP/jeOu76Nh</D></RSAKeyValue>"
Private Const CapiXml1024woCRT As String = "<RSAKeyValue><Modulus>uNXUqvMdjnmd36IS0Gr/lTAp63mZqoayYcN/YHnGs82eVrEWS5vAYqPWx1488BhUBh7kHvVhP5kkKh+i6pfLKAEssy5jnw9h09lgCClBHyntqFT82AlmiaFK8uVkV8rCjDol2nBpvVgNonF+JhQyexWTEI94Phjwvj/6yZRqaLM=</Modulus><Exponent>AQAB</Exponent><D>NVIqaa58xk87RfphZxKW7JjaXv3TYKg+6YkWQ+Sdd91HYkbv4Zvq4gnVuenrtm+uPZ3HvU6YYVpyXlyGCRsFFeXMwJ8Y7zrF6KEs+6hJ4jqBELWUoEPrzU4889v8aIoS+BCMYptpkmzvxjfEWdTPbqjd/tJ25ObbavggoST6ScE=</D></RSAKeyValue>"
Private Const CapiXml1536woCRT As String = "<RSAKeyValue><Modulus>1bkuWuGsKLkvSvrYYhOPVD37bARRUw0U5/yRCjam50+gLGKmxAjzaRjhGQUaaeC2S5DioGckqiqr1zkfSLyQ7KQte5oynxkTdT0QCXHJeVWgOWAknX8sNrAVNt97LOrMXXYZ2JsYMmYiVNqJRTaURWXxdJ5XibXMCRL1pfHbwnL4iqUge1tuiQbFod//7pjl90TukIutHVEyf8BFn5LRQJI4xroQdMJg0/vvRSp8jgy0LoeJ8LkTG+RjUe3XsgmT</Modulus><Exponent>AQAB</Exponent><D>rtTUab3QImQSnuiCmABeMFCf2qXRjPnXj0qZr1wzvmbxpT1yJE0aKXATu27kQ5ZyKXC1IvgdEyLi/aWZxNuURjCrkD/8hw9xTmeMNd2iLaJw9l6CtV/x4C68u+2nCoBq/Gv/ht9RqYRS6ODUTk1aOL1mPNSHT/MeFNK+06lyQNSaf95fMxGPIcnnJ1vtdkHgk2vi5ALSQf5tGIgVY1EFr55M9ABTg1p98XwIQgjIxCZcL4BygfMk1YbESaQFvzth</D></RSAKeyValue>"
Private Const CapiXml2048woCRT As String = "<RSAKeyValue><Modulus>9TFEYeTahPGOXtcRZrLQu1gHm875jv1jgxy0R9V3E/vDyEhNbsRK76rvEs3ljw6spQBQE1zd5wfUvFnhVETOuS0z9aXSAljxSIbyhkL/jT7/4vHEHe/GnBQZPdvJ9PtPr0ssLROy8xcsUEBDwxNRPNHSpmub3FHZzHsoMlJV0cOGmn0qqeMuMrP8zVDycXhXZNsn8v5RPC38qk6VDHdCqGz/90IRYonpFr5my9LaguJHVNCq8BRVa1oJkDtNUFhFXjVHnmxmhS9Mqm2obEpTp/jUk+bRqnygKB3up9OGYdLO1rAv2IoH/K2sxcvnedDzieRmPE/9Y9JBP/UvM+VULw==</Modulus><Exponent>AQAB</Exponent><D>ao8oyuqs1U4ts6YAWAOql2DgnaRL7QrObrLQ3s802yh1o9tYW6VPc+1zzVZSR+P2wBbsth2MCtXqbJkbRoZI2U194WpZZM/GvOB5EkSXz4jrqHOt6dzFEhviBHI6yQ9XSDWBU23WPbN6fL4RNPx2N9pwlAb8S7n+z9FOXOBPj8NyMMtykGqgPyHEAQnuhfLuf/J6OGrHX8dzsZAo6o/bnk49Rv0C6nijE74TeAwJ36UuI9Lw+h6hwtSerEN6o1vy6mIjrjdDM07mKKUMFwkEhKJc6ckBb0xVp/3VRlJb1ocYQHbfjCAPjecR8OVfjaIy9WPMj8WXHegJpiBugWK9wQ==</D></RSAKeyValue>"

'// same keypairs but without CRT
Private Const MonoXml384woCRT As String = "<RSAKeyValue><Modulus>i9COhlY/aGJD+B0fjUtOR+bbDkKyrwDzXzvwbBE8TJmtFYNrjfLHOj/gjdKCEcqb</Modulus><Exponent>EQ==</Exponent><D>GKxVYwApTqft4H2cJ/46/aE1tzjyWx5IzfYoG1Qmnzr+u1/rf+EGkyIzGWIEcyXR</D></RSAKeyValue>"
Private Const MonoXml448woCRT As String = "<RSAKeyValue><Modulus>rGhbXQawiO5muvnbq7FuVZc3QuFp2CZNqHekmRA/fdUzmUP6jFH7usaVh1kZ+Fk0em0fJzjOYgU=</Modulus><Exponent>EQ==</Exponent><D>ZWqQGJqF9jHiE6IIv1lP9hy3GEhcYQd4+a/KOvAKrWm95W6eF+aDWFgzao9lR1/BLP86HhcucSk=</D></RSAKeyValue>"
Private Const MonoXml512woCRT As String = "<RSAKeyValue><Modulus>jq1Bst+LWM5ScL29w+C/GVULDAebcT0Kl9ERGp/I2A2qJ4jHuzr7ltoQqtVGRquQwwDZQ/o1fH99bWraz5Fi7w==</Modulus><Exponent>EQ==</Exponent><D>bRsUH1+my3CZZUXNWY2/T5tizPbCKWrp+5/f5y7k4XK2d7xCN+qSZxn+nT0patdhewBMFOI9/xp5zD4U/seSIQ==</D></RSAKeyValue>"
Private Const MonoXml576woCRT As String = "<RSAKeyValue><Modulus>h18QgR8YiVXKVmcTRuPfHljm9Yz5vPt9UXg25GU2WztihEihEyZYMJaRzEb8/iS7eGg7jLXW8SrxhyLUnXfgWvtn/9uNGinj</Modulus><Exponent>EQ==</Exponent><D>b3t3AOxujzeXknMA0Pfk69C+M6FGIyl2Qxe0vBcdtItCEpYpGKlxv+l1rPu1/VOy4F8Q3u+5dMuhc2OlLfX7F6WkL5+dN7pB</D></RSAKeyValue>"
Private Const MonoXml640woCRT As String = "<RSAKeyValue><Modulus>4YELOUiQPs7Nw6AM2m14LxuKDk1dXGYhvKczD6mB2//U4sitp+MFReJ0ot840hQNwwCssw8hyyniFqIvSjKJknv+HFL4Lc3AyCP3pL5iFf0=</Modulus><Exponent>EQ==</Exponent><D>rHG9SewyEelwLC8Y40SnMxUPOB0LKIpWCLwX/OsI84dmj04qcVNAQxB0O5hmt5GXswJd1VPOdRmf/YrMiLZhIHFbLgdrQP+gyWGCSu3koz0=</D></RSAKeyValue>"
Private Const MonoXml704woCRT As String = "<RSAKeyValue><Modulus>mUDm0P3S9oPB06NJT5oDFS5+Xy/ACBvGdkvNjCiZo9bOLvVpOsiih9ipWZw9zQInjfP0uhGqDBkl9jw61yEHIqed151b9hkO2cmfb2o3GvPkbXkoMcoxBQ==</Modulus><Exponent>EQ==</Exponent><D>WiYta+CaNqfbbW8cELTywSpodDo0uXnACVnENFQeJCQA0FQfyDnJBJ2Qy0vuhbaAbz2qNXZcYp6QxbeBQQZGEB//nahkNns7KxKXDEFMMU1ghU9eoubr8Q==</D></RSAKeyValue>"
Private Const MonoXml768woCRT As String = "<RSAKeyValue><Modulus>pnVBGKuCV1sdnZP7yHMKlMnyc+4MZicSRDu6ESWPKUx/Ab2fbwwOoHDE5pSW/wCGziaEA2Agfwt6YKAr/JyPmcBcHichUjhzjDvExBrdd3jmQ1WjjNzV829+qSEq0kUl</Modulus><Exponent>EQ==</Exponent><D>kt/uJNORH+b8A4KS3gsndDm3z7Ps0prx//h3ABIU6DRwEJhBYfuUb3KPnkbflbUqONprCS1FlC0mo+Hxald/r99a5PE3JWiVTN4GHuZ3zYEviEvRtNsOG7XYKydTUO3F</D></RSAKeyValue>"
Private Const MonoXml832woCRT As String = "<RSAKeyValue><Modulus>3dVclQYr1ks5x8VXLcO0H0BRNlmg/XT01IFso0aQY5AwU/kFbDUwTSrmSZCuRBk2blp14BYvpwpviuP9WkIcjhTSuPwPD1XWSl33WHSWEc6uYEHxjn0gieHK3SiyVAgOrcVXtOaNJck=</Modulus><Exponent>EQ==</Exponent><D>aGRnzaiNGYzP5YoK6FwYhy1TZN7iWSf6vlsF8nuPPemAJ4Q+yYJxFUFdT8udTTkKjkiv8BrhBpTUlAjP9ge+BNftSibZ4zp8wd1pxewIPFYnhimAVIFasWv/1NnIP8QwH0bQQOshCxE=</D></RSAKeyValue>"
Private Const MonoXml896woCRT As String = "<RSAKeyValue><Modulus>8SR9zUf+X33JO4Gen620JE7yqQhvP0RSnU+XGE5fSHTPmy/HtuP5/IsCbfDsKOa5aAa4uj6PpxsG/6GgrbgmkxSfJmj8OfYP7Eo7wjXheJmv87Iw8y0rJ3PhkKbF82GFU/CmYQO3A77QVK74v9NMRw==</Modulus><Exponent>EQ==</Exponent><D>Ko34FSrSiVJuzkQM7wCJM5V2HdRP3fz/hSwpuP7FhUHKSI/2ETdKO6APfNAprN1sA0x687Cv8E+4mTmZ7zr/6qhiXIxKO1CYJIssptb/IfAC9McjnXeRfvn7XtHwprzmFRCfTE06ZPWD4QXJG22WIQ==</D></RSAKeyValue>"
Private Const MonoXml960woCRT As String = "<RSAKeyValue><Modulus>tsPl3wQ+EYH4tuzDokt/CknZUVNZMr9AEwZCGMzpXORmkHaBA5Dh5N24OtQwO1YQ4gXCosU9YpdQujIvki48txiL+r6/KtK1hIOm4h/LCZRZ0ztYZvufH2ysv6Sv22iEbv8/ABOmaAu7A0RueGI1dX8aZ+dIlqzz</Modulus><Exponent>EQ==</Exponent><D>rAOrLEA6atSt2VdOtt2kvmOfW5m9XPA8TiQB+TlUGzFReOgA9Ewf5nZTCjEeVfamel/GPtfBTbuXRdTf41eV1Ci1WHuXJ2/ZiN8ob06O0UAjJTlva1RGhOVVBZyI2tJOA2vJ/zPPovcdiReyOeSu3neqYqr3IUVx</D></RSAKeyValue>"
Private Const MonoXml1024woCRT As String = "<RSAKeyValue><Modulus>i+O73a/wy4fMi6V9dF9Us4oyAUvNwrJcOS69r7edDjw0MDd5vz8PcaAdL3BOwMEmItI1i8Z39HxqvuuwdB0GGCNKGh4Ft680nIAgsLugztJ4Shjm+xgFM3cFSGxJpSWkWlTpXs2ARhOSIbr5/+UwON4EvpkYxC5GbRIsrqDHHV8=</Modulus><Exponent>EQ==</Exponent><D>OZoCD/0m6mUX/UQkmVRuK89+AIigBOAH2097SFqqFOudBMuMe+zKH7pmXtPkMUB5HWWdk+hPgsnRmeiT85N6+kB7xMfgGI5AsJga19OAi2yI3RnXlTq0FMcYHZCvRE8AXUxVQTO7/n3iq3r8TEDaPmcTpn6eooXvGoA6jRCHLYk=</D></RSAKeyValue>"
Private Const MonoXml1536woCRT As String = "<RSAKeyValue><Modulus>jzYjq6zGOWfmpnzDf5SNrSifeYbFFgbh0/tO2UkLWBpbFqHdLo8CZJt1j3UtSN82ZuV6IBMJnmIsxOH3JQ677IPb76Hz/F0V07jCM88kcz3RRtCahXj/14p2EwTY3297yylWx8+zGmpQDPOxejbaGyjn2TyPx6Nq54SVSAfBUgcXuwwpksogwv/neZLyOlu/JBG5Ej11FOfJ8vi7gb/OCqK1EdzRthf9e4FS5KoxC81TiTUXyfesYpSsHI6fQ5i1</Modulus><Exponent>EQ==</Exponent><D>OvgszjgVYu6MJm+byx8NKS7YQRlgNj8RsaO3Di0iyey8GGDEfJU9OHw/d05d8NRhseYFHEQTBPs/nF0LaZynu73TCFG+0VOBdUwTuvrw5CiDWWT0VRO0pAvWRBEOAaZfiC2ViL8qyz8MYj4MM8wOUMOOx+Oy9LGa9MJOcLSkJKixqWLqxv17PVIoyMiHE+SW2m5uMleT32TVU+Mzz3lec2n1RWRGS4P14EyOf1l8WqmRlMk8jXm/xVf8w9xgbwtF</D></RSAKeyValue>"
Private Const MonoXml2048woCRT As String = "<RSAKeyValue><Modulus>ppiz9wru8QdjxD1IZ8Ouc4rpKMjR51jDq/mPu7gILbto1sD+01r/P84zFd2n9Jbv+vHJ8ClTr/9vh3dy6OzN/ASUoAMzmGnHQPsFHyaZ7TxDmF2EaF45F0rDbsPsOxlHUKkc33EuHwzXRZRdD4c2vCY8D+qrdpldkC4KH4oWjBHPk2MlqM1mPGJIvzz9nANhEl9YHHHZmAV2auZIWMWyO9zPHoE0YYMeFTHIuOZmxbu6iKX0pWcHzukx6FCqxN9zOAz5xl9D0f//0vhsiZUINM4y4ypS9C+jF8WAUthj29R3s1Hxr5I32kr3+nhtkHu7ljqLzYqCBq6hixZEhHlUlQ==</Modulus><Exponent>EQ==</Exponent><D>f2W2y/lNTueIhwGv1uDu0NOjPU5GKWH/CwoinpvKBNqbdwwOKSd35X+QeiH46Dcv/CJPIRCLSlnr4BAMlABhSD+88tVFkqs+BIO4n1nBALWdGillQMCGAsCzkPAtHiJjtib39ilfgSfv6ensz6OiU6TEhKRlAFcpbkFTCQ8+axtxer2M3TiaAarE3njI65lgOwmu+djnqDyKWzfGcA37QafIQPOnWiMIgtBWfKetnKXtk1ReqdDw2IckUNBud4EeRStM7jy7MlVNc0TXiTDK7ow+Vd2EIPGpQXkav167V4F4Lc7VYrGDrFTV2fM66uBBcmgaH3gUOVGq0qUttAuZLQ==</D></RSAKeyValue>"


Private Sub ICategorizable_Categorize(ByVal Cat As SimplyVBComp.CategoryCollector)
    Cat.ForFixture "System.Security.Cryptography"
End Sub

Private Sub ITestCaseSource_GetTestCases(ByVal Test As SimplyVBComp.TestCaseCollector)
    Select Case Test.MethodName
        Case "SignHash_WithValues_IsVerified"
            Test.Use "MD5", 16
            Test.Use "SHA1", 20
            Test.Use "SHA256", 32
            Test.Use "SHA384", 48
            Test.Use "SHA512", 64
        
        Case "ImportExport_WithCapiXml_ShouldNotThrowException"
            Test.Use CapiXml384, "CapiXml384"
            Test.Use CapiXml448, "CapiXml448"
            Test.Use CapiXml512, "CapiXml512"
            Test.Use CapiXml576, "CapiXml576"
            Test.Use CapiXml640, "CapiXml640"
            Test.Use CapiXml704, "CapiXml704"
            Test.Use CapiXml768, "CapiXml768"
            Test.Use CapiXml832, "CapiXml832"
            Test.Use CapiXml896, "CapiXml896"
            Test.Use CapiXml960, "CapiXml960"
            Test.Use CapiXml1024, "CapiXml1024"
            Test.Use CapiXml1536, "CapiXml1536"
            Test.Use CapiXml2048, "CapiXml2048"
            
        Case "FromXmlString_WhenCapiWithoutCRT_ShouldNotThrowException"
            Test.Use CapiXml384woCRT
            Test.Use CapiXml448woCRT
            Test.Use CapiXml512woCRT
            Test.Use CapiXml576woCRT
            Test.Use CapiXml640woCRT
            Test.Use CapiXml704woCRT
            Test.Use CapiXml768woCRT
            Test.Use CapiXml832woCRT
            Test.Use CapiXml896woCRT
            Test.Use CapiXml960woCRT
            Test.Use CapiXml1024woCRT
            Test.Use CapiXml1536woCRT
            Test.Use CapiXml2048woCRT
            
        Case "SignAndVerify_WithCapi_ShouldBeValid"
            Test.Use CapiXml384
            Test.Use CapiXml448
            Test.Use CapiXml512
            Test.Use CapiXml576
            Test.Use CapiXml640
            Test.Use CapiXml704
            Test.Use CapiXml768
            Test.Use CapiXml832
            Test.Use CapiXml896
            Test.Use CapiXml960
            Test.Use CapiXml1024
            Test.Use CapiXml1536
            Test.Use CapiXml2048
            
        Case "ImportExport_WithMonoXml_ShouldNotThrowException"
            Test.Use MonoXml384, "MonoXml384"
            Test.Use MonoXml448, "MonoXml448"
            Test.Use MonoXml512, "MonoXml512"
            Test.Use MonoXml576, "MonoXml576"
            Test.Use MonoXml640, "MonoXml640"
            Test.Use MonoXml704, "MonoXml704"
            Test.Use MonoXml768, "MonoXml768"
            Test.Use MonoXml832, "MonoXml832"
            Test.Use MonoXml896, "MonoXml896"
            Test.Use MonoXml960, "MonoXml960"
            Test.Use MonoXml1024, "MonoXml1024"
            Test.Use MonoXml1536, "MonoXml1536"
            Test.Use MonoXml2048, "MonoXml2048"
            
        Case "FromXmlString_WhenMonoWithoutCRT_ShouldNotThrowException"
            Test.Use MonoXml384woCRT
            Test.Use MonoXml448woCRT
            Test.Use MonoXml512woCRT
            Test.Use MonoXml576woCRT
            Test.Use MonoXml640woCRT
            Test.Use MonoXml704woCRT
            Test.Use MonoXml768woCRT
            Test.Use MonoXml832woCRT
            Test.Use MonoXml896woCRT
            Test.Use MonoXml960woCRT
            Test.Use MonoXml1024woCRT
            Test.Use MonoXml1536woCRT
            Test.Use MonoXml2048woCRT
        
        Case "SignAndVerify_WithMono_ShouldBeValid"
            Test.Use MonoXml384
            Test.Use MonoXml448
            Test.Use MonoXml512
            Test.Use MonoXml576
            Test.Use MonoXml640
            Test.Use MonoXml704
            Test.Use MonoXml768
            Test.Use MonoXml832
            Test.Use MonoXml896
            Test.Use MonoXml960
            Test.Use MonoXml1024
            Test.Use MonoXml1536
            Test.Use MonoXml2048
        
        Case "VerifyHash_WithCapi_ReturnsExpected"
            Test.Use CapiXml384, NewBytes(&H6D, &H6F, &HE1, &H17, &H28, &H88, &HC, &H72, &H9D, &H17, &HBD, &H6, &H2, &HBA, &H6D, &HF0, &H16, &H2A, &HE6, &H19, &H40, &H1D, &H58, &HD3, &H44, &H70, &HDE, &H57, &H4C, &HC8, &HE5, &H9C, &H5D, &HA1, &H84, &H7E, &HD4, &HC3, &H61, &HAA, &H21, &HC3, &H83, &H5B, &HAF, &H1C, &HB7, &H2B), "CapiXml384"
            Test.Use CapiXml448, NewBytes(&H59, &HD9, &H57, &H80, &H20, &H18, &HF6, &H23, &HDB, &H3A, &HE3, &HB0, &HFD, &HEA, &HD3, &H2A, &H52, &H83, &H41, &H49, &H48, &HD8, &HD5, &H4F, &HE7, &HDB, &H7A, &H97, &HF9, &H7, &H27, &HD9, &HAC, &H60, &HA2, &H17, &H76, &H70, &H9, &H9, &H23, &HE, &HBF, &H3D, &H1, &H93, &H91, &H97, &HDB, &HB3, &H1F, &H20, &H78, &HFA, &H7E, &H72), "CapiXml448"
            Test.Use CapiXml512, NewBytes(&H66, &H80, &H40, &H76, &H1, &HDA, &H66, &HF2, &H36, &H5C, &HCE, &H4C, &H47, &HA1, &H2, &H1C, &H4F, &HC8, &HCE, &HB2, &H1, &HC2, &HD1, &H54, &H55, &H41, &HAF, &H12, &H60, &HD7, &H49, &H9A, &H4B, &H37, &H20, &H1A, &H2A, &HD8, &H2B, &H82, &HCA, &H84, &HAF, &HB3, &HB1, &H4D, &HA9, &HB, &H70, &H17, &H3B, &HD8, &H17, &HAA, &H51, &HE7, &H1F, &HB7, &HCF, &HD8, &HF9, &H32, &H60, &H1), "CapiXml512"
            Test.Use CapiXml576, NewBytes(&H25, &H39, &H21, &HDE, &H34, &H23, &HEC, &HFE, &HEC, &H28, &HB2, &HEA, &H8D, &H5A, &H6C, &H4B, &H86, &H2B, &HEA, &H6E, &HB7, &HBA, &H1A, &H38, &H6A, &H8C, &HC9, &HC5, &HC1, &H89, &H84, &H9F, &H97, &H5B, &HA0, &H58, &HD6, &H8, &H9, &H5B, &H4C, &H9A, &H9F, &HFF, &H10, &H8B, &HD1, &HEA, &HED, &H81, &H62, &H2D, &H9, &H87, &H81, &HED, &H76, &HCF, &H47, &HB8, &HF8, &H6, &H84, &H80, &H8E, &HBC, &H8C, &HDF, &HF2, &HEE, &HAB, &H47), "CapiXml576"
            Test.Use CapiXml640, NewBytes(&H7E, &H58, &H16, &H4E, &HD9, &HFE, &H4D, &H73, &H2E, &H6D, &H5B, &H62, &H5, &H91, &H43, &HA4, &HEF, &H65, &HA9, &H68, &HA6, &H19, &H65, &H8F, &H25, &HBC, &H2B, &HE2, &H93, &HE2, &HEF, &H5E, &H29, &H11, &HC, &HCE, &H17, &H1, &H5D, &HB7, &H71, &H79, &H83, &HC5, &HAB, &H51, &HBF, &H87, &H80, &H4A, &H4, &H7B, &HB4, &H46, &HCA, &H11, &H71, &HB1, &H67, &H28, &H4C, &H16, &H82, &H6B, &HE3, &H11, &H72, &H6D, &HA9, &H7, &H4A, &HE6, &H33, &H45, &H30, &H15, &H83, &H23, &H5E, &H5), "CapiXml640"
            Test.Use CapiXml704, NewBytes(&H91, &H3C, &H91, &H7C, &H2A, &H26, &HB1, &H6F, &H7C, &HFD, &H75, &HCC, &HB0, &H63, &H3, &H76, &HBF, &H93, &HAB, &H3B, &HD4, &H71, &H86, &H86, &HEF, &H10, &HD6, &H51, &H8D, &H6B, &HB4, &HF2, &HF9, &HCC, &H50, &H3A, &H63, &H9A, &HD2, &HA2, &HE2, &H72, &H6, &H88, &H4E, &HCD, &H38, &H9B, &H87, &H72, &HAD, &H38, &HF7, &HCB, &H6B, &H69, &H43, &HA0, &H4C, &H9B, &H10, &H17, &HAB, &HE8, &H50, &H34, &H6E, &H8D, &H56, &HBC, &H6C, &H0, &H87, &H40, &H5, &H4A, &H20, &H16, &H49, &H4F, &H93, &H48, &H5F, &H7A, &H10, &H61, &HC6, &HC9), "CapiXml704"
            Test.Use CapiXml768, NewBytes(&HD, &H67, &H37, &H0, &H3E, &HD5, &H2, &H12, &HF0, &HF9, &HC2, &H63, &H29, &HD9, &HEA, &H7B, &HDC, &H5B, &HF3, &HF0, &HB9, &H3B, &H4, &H98, &HD9, &HE7, &HA3, &HB2, &HD2, &H1, &H4, &H7A, &HF4, &H11, &H7F, &H62, &HC7, &H18, &H14, &HA0, &H54, &H96, &H51, &H84, &HC4, &H6D, &H6A, &HCB, &H67, &H7, &HD0, &H33, &H93, &H99, &HAD, &H1F, &H16, &HA6, &H7F, &HE0, &H60, &H8A, &HDC, &H95, &HB9, &HE, &H68, &HA9, &H78, &HE1, &HD, &H47, &H56, &HF3, &H1, &H42, &HF6, &HD7, &HE4, &H4A, &H98, &H7E, &HC4, &H5E, &HE, &H9, &HC4, &H92, &H42, &H69, &H74, &H7A, &HC9, &HE, &H9F, &HF2), "CapiXml768"
            Test.Use CapiXml832, NewBytes(&H7B, &HBC, &HE6, &HEC, &H8B, &H11, &H7C, &H28, &H9, &H3A, &H6, &H81, &H52, &H20, &H7B, &H50, &H88, &H74, &H3C, &H96, &HBC, &H40, &HAF, &H8E, &HD3, &H60, &H49, &HBF, &H93, &H6C, &HF6, &HE9, &H34, &HAB, &H7E, &HE7, &H56, &H2E, &H33, &H5A, &H75, &H4E, &HFE, &HFF, &HC8, &H15, &H2, &H8C, &H30, &H81, &HD0, &H46, &H68, &H42, &H2E, &HA8, &H78, &H5C, &HDE, &HEA, &H98, &H79, &H81, &HBF, &HEA, &HC4, &H8B, &H2F, &H50, &H7A, &H50, &H11, &HAC, &H1, &HEB, &H84, &HA0, &H9F, &H7A, &H67, &HFA, &H33, &H3A, &H65, &H1C, &HE9, &HFA, &HD9, &H46, &H6, &HAF, &H3E, &H83, &H4A, &H67, &H11, &HB, &HD5, &HD2, &H56, &H5E, &H5, &H69, &HE8), "CapiXml832"
            Test.Use CapiXml896, NewBytes(&H60, &HAA, &H26, &H4D, &HBF, &HA, &H38, &H5E, &H7B, &H66, &H1E, &H1D, &HED, &H5F, &HF2, &H6A, &HC4, &HAB, &H35, &H43, &H93, &H67, &H26, &H90, &HEB, &H34, &HC1, &HCB, &H22, &H4C, &H20, &H0, &HE5, &HEB, &HA8, &H14, &H6, &H8A, &HBD, &HA, &H7, &H2, &H62, &HC9, &H82, &H27, &H84, &H1D, &H4, &HC6, &HFC, &H20, &HE4, &H17, &H7, &H33, &H3, &HE7, &H33, &H8D, &H4A, &H69, &H79, &H51, &HA5, &H20, &HED, &HB8, &H94, &H2, &HB, &HD2, &HB9, &H60, &H71, &H56, &H47, &H96, &HE8, &HA7, &H1A, &H4A, &H71, &HD8, &HD1, &HC, &H82, &H86, &HF9, &H1C, &H7, &H46, &HB6, &HF, &HCB, &H8C, &H90, &H95, &H93, &HBA, &HF2, &HC3, &HB4, &H68, &HE8, &HE4, &H55, &H6C, &HEA, &H1D, &HA7, &H53), "CapiXml896"
            Test.Use CapiXml960, NewBytes(&H57, &H36, &HBD, &HF3, &H5D, &H99, &H9A, &H73, &HF1, &HE6, &HC1, &H4C, &HDC, &HBF, &H5D, &HC1, &HC0, &H7D, &H32, &H46, &H2B, &HB, &H51, &HDB, &H56, &HA8, &H25, &HE7, &HF9, &H76, &HB0, &HF, &HC1, &HBD, &H49, &H5E, &H14, &HF8, &H1F, &HD9, &H94, &H41, &HA7, &H4B, &HF8, &H9C, &H4A, &H9B, &HA5, &HF8, &HDF, &HE6, &HF5, &HF7, &H6D, &HFB, &H59, &H24, &H9F, &HAE, &HBA, &HDF, &H51, &H2F, &HB2, &H68, &HF1, &H35, &HFB, &HCC, &HF7, &H1D, &H86, &H2A, &H2E, &H53, &H9F, &HCA, &HBC, &H58, &HBF, &H6A, &HBD, &H3A, &HAB, &HCA, &H64, &H92, &H42, &H97, &H87, &H0, &HEE, &H4A, &H3F, &HE5, &HED, &H20, &H49, &HF4, &H6, &H53, &HBA, &HF8, &H9D, &H62, &HC4, &HC7, &H99, &H3E, &H9C, &HF9, &HF1, &HA6, &HF7, &HD, &H21, &HBC, &HF2, &H8D), "CapiXml960"
            Test.Use CapiXml1024, NewBytes(&H30, &HB9, &H7F, &HBC, &H72, &H75, &HB4, &HEE, &H8F, &H8F, &HF1, &HB9, &HC3, &HCB, &HC0, &HB2, &H94, &H8C, &H1D, &HB0, &H60, &HE8, &H5E, &H8D, &H3F, &H36, &HF2, &H4E, &H9, &HCD, &H48, &H85, &HD3, &H93, &HEC, &HEB, &H8, &HA6, &HD1, &HEF, &H9F, &HF5, &HAB, &H2D, &H30, &H3E, &H86, &H64, &H8F, &H9B, &HB4, &HF, &HDB, &H70, &H4A, &H59, &H8D, &H6F, &H14, &H3, &HFE, &H46, &HFC, &H81, &HA8, &HC9, &H75, &H40, &HEE, &HB1, &HED, &HC4, &HD0, &HE5, &HE5, &H8F, &HCD, &H10, &H1, &HB2, &H9D, &HFD, &HE6, &H1E, &H43, &H3A, &H69, &HDB, &HF9, &H6D, &HC9, &HDD, &H57, &H9C, &H84, &H94, &H7D, &HC, &HDC, &HFA, &HD9, &HDA, &HE6, &H90, &HBA, &H8C, &H15, &H68, &HEA, &H9, &HEE, &H8D, &H5D, &H5D, &H73, &HDE, &HD1, &H76, &HE2, &HF1, &H48, &H23, &H57, &HA6, &HFA, &H37, &H57, &HE7), "CapiXml1024"
            Test.Use CapiXml1536, NewBytes(&H38, &HB, &H7A, &HF8, &H64, &HEB, &H21, &HCA, &HC6, &H7F, &H9, &H40, &HD0, &H92, &H8C, &H96, &HEE, &H47, &H5, &HFE, &H17, &HE9, &H93, &H97, &HEF, &H9F, &HC0, &HF1, &HF5, &H41, &H91, &H83, &HEA, &H77, &H1B, &H6A, &H77, &H4A, &H14, &HE2, &HD9, &H88, &H8D, &H8E, &H91, &HAF, &H26, &H87, &HB9, &HBC, &H14, &H52, &HBD, &HAD, &H7E, &H90, &H0, &H33, &H1B, &HF0, &H8, &H41, &H7E, &H77, &H55, &H4E, &HAA, &HF3, &HAC, &H8F, &H0, &H76, &H25, &HC0, &H72, &H88, &HC0, &HA4, &H3, &H46, &HCC, &HBC, &HFE, &H5A, &H44, &H10, &HD, &H14, &H7F, &H65, &H2E, &H47, &H55, &H85, &HF6, &HC9, &HEB, &H60, &H84, &H9, &H91, &H3D, &HAC, &H8E, &H40, &H44, &HE5, &H7C, &H4F, &HAE, &HA4, &H21, &H7D, &H16, &H27, &HFC, &HE, &HC5, &H6B, &HC, &H63, &HA9, &H1E, &HE, &HCF, &H9E, &H8E, &HFF, &HA9, &HA5, &HB3, &H87, &HDC, &H80, &H71, &HA2, &H4F, &H21, &H80, &HC2, &H88, &HC0, &HA4, &H99, &H46, &H96, &H25, &HFB, &H73, &H16, &HCA, &H97, &H25, &H5A, &H92, &H19, &H50, _
                                           &HCD, &HBA, &HA0, &H6D, &HCA, &H9F, &H23, &H14, &H71, &H51, &HB8, &H94, &H47, &HAC, &HEE, &H12, &H53, &H24, &H7E, &HF4, &HD0, &HD9, &H51, &H89, &HDA, &H1C, &H6F, &HDE, &H51, &H9A, &HD9, &HDA, &HA0, &HE5, &HBE), "CapiXml1536"
            Test.Use CapiXml2048, NewBytes(&H62, &HB8, &HE3, &HD0, &H8B, &H8E, &H0, &HFA, &H59, &H17, &HC7, &HC, &H81, &H76, &H3A, &H35, &HAA, &HC7, &HE4, &HFA, &H7C, &H96, &H9C, &H88, &H15, &H88, &HA5, &HA6, &H7C, &H95, &H55, &HC5, &HDD, &HA5, &H83, &H25, &H33, &HFF, &HEE, &H9E, &HDD, &HF1, &HF1, &H85, &HB3, &HEE, &H78, &H11, &HC7, &H83, &HA6, &HD8, &HB4, &H34, &HC4, &H73, &H2A, &HE5, &HC9, &H2A, &H5F, &H5C, &HF5, &HAB, &HB0, &HB6, &HAD, &H52, &HB3, &HBA, &H31, &HE, &H5A, &H9, &HB1, &H74, &H90, &HCC, &HC7, &H7C, &H58, &H2D, &H49, &H9F, &HDC, &H6F, &H3, &H58, &HB0, &H1D, &HFA, &H7F, &HE5, &H8E, &H9, &HAC, &H17, &HCF, &HD8, &HF, &HE0, &H1F, &H1B, &HDD, &H72, &HA5, &HCA, &H5E, &H51, &H2F, &H52, &HD9, &H66, &HE9, &HA5, &H78, &HCE, &HE4, &H73, &H63, &HCA, &HE5, &H58, &H30, &HE9, &HB9, &H57, &H7, &H56, &H77, &H67, &HFC, &HBC, &HE2, &HF6, &HAF, &HD6, &H5D, &H2, &HBB, &H14, &H47, &HD2, &HDF, &H12, &HC8, &H42, &HF0, &HA5, &H42, &H3B, &H90, &HB3, &HC8, &H9D, &HD7, &HB6, &H89, _
                                           &H25, &HDA, &H7D, &HC2, &H53, &H94, &H1D, &H20, &H8E, &H2C, &H96, &H32, &H43, &H4C, &HE1, &H20, &H64, &HEC, &H15, &HC5, &H44, &HEE, &HCB, &HEC, &H89, &HBF, &H84, &H1E, &H93, &H2B, &H87, &HEC, &HE4, &H97, &H66, &HF8, &HD7, &HD5, &H4B, &HFF, &H9D, &H4B, &H5E, &H73, &HFA, &H11, &H50, &HD5, &HA0, &HF3, &H7C, &H3D, &HD8, &H7B, &H12, &H4, &HE8, &HB7, &H27, &H5A, &H11, &HF0, &H65, &H33, &H13, &HC6, &HDC, &HC1, &HFB, &HD1, &H7A, &H93, &HCF, &H1B, &HFB, &H12, &H72, &HF6, &HD9, &H6F, &H38, &HB, &HFE, &HBE, &H4D, &HE0, &HF8, &HEB, &H21, &HAE, &H5D, &HD2, &H7C, &H81, &H74, &HA, &H47, &H1E), "CapiXml2048"
        
        Case "VerifyHash_WithMono_ReturnsExpected"
            Test.Use MonoXml384, NewBytes(&H6B, &HEF, &H8A, &H2E, &H2E, &HD5, &HB6, &H19, &H2D, &H9C, &H48, &H75, &HA8, &H54, &HAD, &H61, &HD1, &HCC, &HF3, &H9A, &H3E, &H4E, &HE2, &HF1, &H44, &H1D, &HC4, &H3A, &H30, &HF4, &H9B, &H2D, &H88, &HA7, &HB8, &HEC, &H2D, &H17, &H4E, &H66, &H6C, &H4C, &H5A, &HB5, &H44, &H4B, &HAF, &H6), "MonoXml384"
            Test.Use MonoXml448, NewBytes(&H9F, &H62, &HDF, &HD4, &H8B, &H3E, &H85, &HEC, &HF9, &HF2, &H17, &H1C, &H2B, &H18, &H37, &HDA, &HCA, &H74, &H5F, &H85, &H70, &H41, &H44, &HB3, &HE5, &HA3, &HC8, &HC7, &H37, &H9E, &H52, &H16, &H18, &H2C, &HE3, &H87, &H1A, &H34, &H13, &H4A, &H5D, &HBB, &H79, &H27, &H1C, &H2A, &HD2, &H96, &H79, &HC4, &H26, &H51, &H1B, &H24, &H12, &HBC), "MonoXml448"
            Test.Use MonoXml512, NewBytes(&H33, &HBB, &H7E, &HB, &HC0, &HB2, &H9A, &HC2, &H2F, &HF4, &HBE, &H1B, &HDF, &HD6, &H79, &HC1, &H38, &H47, &HEA, &H5, &HB2, &HC0, &HFA, &HF8, &HC9, &HDC, &H6D, &H56, &HBF, &HD3, &HBF, &HAA, &HB8, &H1E, &H74, &HE4, &HF3, &H38, &H45, &HA9, &H34, &HD1, &H5C, &HD, &HF, &H56, &H70, &HC, &H93, &H6B, &HD6, &H80, &H17, &HAD, &H80, &HF9, &HD8, &HFD, &H1E, &H6F, &HF3, &H5C, &HB2, &H78), "MonoXml512"
            Test.Use MonoXml576, NewBytes(&H61, &H8C, &HD0, &HE3, &H63, &H95, &H7C, &HB6, &HD8, &H84, &H4D, &HD1, &H4, &HDF, &H1F, &H4A, &HCF, &H69, &H95, &H7B, &H69, &H8E, &H9, &H2A, &HF, &H1B, &H23, &HA7, &H20, &H31, &H95, &H93, &HD1, &H67, &HBC, &H27, &H80, &H41, &H60, &HD1, &HFE, &H62, &HB2, &H17, &HC9, &H57, &H4F, &H3, &H40, &HDB, &HB3, &H7E, &HD2, &HC, &HEA, &H7D, &H72, &H76, &H64, &H4F, &H51, &H79, &H43, &HCC, &H8F, &H36, &H1E, &H81, &H43, &H20, &HB9, &HAD), "MonoXml576"
            Test.Use MonoXml640, NewBytes(&H4A, &H6A, &HED, &HEC, &H96, &H9C, &H89, &HD1, &H41, &H2E, &H16, &HD, &HBA, &HB0, &H48, &H92, &HF9, &HA6, &H33, &H26, &HD, &H6C, &H99, &HA9, &H4E, &H3B, &H68, &H82, &HAB, &H94, &H33, &H89, &HEC, &H8A, &HCC, &H32, &HDD, &H45, &H9C, &H16, &H5E, &HCE, &H5F, &HF3, &HDC, &H5F, &H9, &HC7, &H69, &HC7, &HEA, &H74, &HAB, &H79, &HA7, &H55, &HD9, &HF8, &HDF, &H8F, &H8C, &H9A, &HBA, &HA9, &H56, &H86, &H96, &H64, &HE9, &HC0, &H21, &H8C, &H34, &H91, &H31, &HC2, &H80, &HC7, &H47, &H6F), "MonoXml640"
            Test.Use MonoXml704, NewBytes(&H94, &HC5, &H45, &HCD, &H9C, &HA9, &HBC, &HDF, &H9D, &H4, &HCE, &HFD, &H21, &HEB, &H3F, &HBE, &H32, &H56, &HC3, &H6B, &HEF, &H4E, &H8F, &HA9, &H2, &H14, &HC4, &HF1, &HFA, &H9B, &H35, &HFE, &H36, &H34, &H3, &H31, &HC1, &HC8, &HBF, &HA1, &H41, &H3, &HCB, &HE1, &HB9, &H81, &H76, &H60, &HC9, &HD1, &HB4, &H4, &H98, &HA5, &HDF, &H4F, &H37, &H60, &HB8, &H15, &HF8, &H22, &HB7, &H54, &H32, &H87, &H19, &H9B, &HB9, &HDF, &HB9, &H2D, &H25, &HA2, &HAF, &H4, &HC1, &HE0, &HF0, &HB, &HF2, &HCC, &HE, &H1F, &H40, &HF6, &H5C, &HCD), "MonoXml704"
            Test.Use MonoXml768, NewBytes(&H28, &H99, &HE0, &HD2, &HCF, &HD3, &H2B, &H1B, &HA2, &H6, &HC5, &H17, &H86, &H7, &HC8, &H49, &H77, &H33, &HEC, &HFE, &HC9, &H15, &H99, &H90, &H4C, &H6C, &HED, &H2C, &H32, &HF8, &HAB, &HA, &HB6, &HEB, &H15, &H8, &H4A, &HC1, &HDD, &HAD, &H88, &H47, &HAD, &H3D, &HA2, &H4B, &H94, &H7E, &H37, &H1F, &H33, &HFC, &HC3, &HFE, &HC2, &H27, &H45, &H74, &H8E, &H3C, &HC8, &H68, &H8C, &HF4, &H77, &HCC, &HD0, &H79, &H37, &H7E, &H26, &H1B, &HDE, &HBF, &H16, &H3E, &HAE, &HB9, &HEB, &HA0, &H0, &HCE, &H51, &H8A, &H69, &H12, &HF5, &HBE, &H39, &H1C, &HF, &HF, &HD8, &H13, &HDD, &H6B), "MonoXml768"
            Test.Use MonoXml832, NewBytes(&H8D, &H56, &HB2, &H3C, &H45, &H47, &HB8, &H6F, &H56, &H7D, &H85, &H4F, &H3C, &H14, &HAC, &H61, &H8, &H8C, &H6A, &HF3, &HAF, &HCA, &H65, &HCC, &HC3, &H6F, &H53, &H6F, &H84, &HC1, &H9F, &HFD, &H66, &H83, &HA1, &H3B, &HFF, &H61, &H41, &HDB, &H2C, &HE5, &HD5, &H13, &H3E, &H15, &H7A, &HBD, &H1F, &H44, &H4C, &H4F, &H10, &HB7, &H4A, &H4B, &H9D, &HD1, &HF5, &HC2, &H4E, &H4D, &HC8, &HF9, &H51, &HC9, &HF3, &H4, &H69, &H2, &HAE, &H7E, &HC3, &H76, &H56, &H8, &H8E, &HF7, &HA1, &H25, &H1B, &H97, &H65, &H8E, &H3A, &H98, &H52, &HDB, &H3E, &HF4, &H59, &H5F, &HEE, &H6D, &H78, &H22, &H37, &H2E, &H79, &H69, &H6D, &H8F, &HF9, &HDF), "MonoXml832"
            Test.Use MonoXml896, NewBytes(&HAB, &HD9, &HE4, &H5C, &HAB, &HF7, &HE1, &H6, &H7F, &HC, &HD6, &H3, &HB5, &HA1, &HDB, &H22, &H3E, &H85, &HBE, &HCD, &H54, &H12, &HD5, &H11, &H71, &HCC, &HEE, &H71, &H4B, &HA8, &HB5, &HAE, &H4, &H82, &H78, &H72, &HE8, &H7B, &H77, &H42, &H58, &H14, &HA3, &HF0, &HFC, &HE9, &H15, &H98, &H2E, &H34, &H57, &HAA, &H95, &H6F, &H2E, &H9B, &H5B, &H88, &HF0, &H51, &H26, &H35, &H1F, &HC, &H59, &H51, &H73, &HE, &HD3, &H5D, &H2, &HAD, &HB7, &H1C, &H94, &H57, &H1E, &HA6, &H1, &H19, &H73, &H29, &HBE, &HDF, &H77, &HF2, &H13, &H28, &HBD, &H50, &H89, &H39, &H6A, &H1B, &HEF, &H66, &H29, &H71, &H55, &H44, &H3A, &H36, &H89, &HC1, &HFE, &H25, &H32, &H9F, &H65, &H76, &HEA, &H71), "MonoXml896"
            Test.Use MonoXml960, NewBytes(&H7A, &H13, &H6, &HF1, &HB5, &H14, &H78, &H33, &HA6, &H14, &H40, &HDC, &H22, &HB6, &HF3, &HBB, &HDC, &HCD, &H53, &HAF, &H5, &HC5, &H84, &HC, &HD2, &H15, &H5A, &H4, &HFC, &H30, &H57, &H64, &HF4, &H8B, &HD6, &H5D, &H5B, &H3D, &HFC, &H82, &H6B, &HB9, &HE4, &HB9, &H56, &HB3, &HCF, &H2A, &H6D, &H14, &H83, &H31, &H9E, &HFD, &H55, &H4B, &H2C, &HBD, &H5A, &HA8, &HAC, &HD6, &H5D, &HFA, &H58, &HF8, &H3E, &H60, &H32, &H11, &HA4, &H9, &HC2, &H1, &HE7, &H14, &HEF, &HBA, &H51, &H57, &H86, &HA5, &H86, &H28, &H63, &H68, &H33, &HBF, &H34, &HF9, &H1D, &H36, &HC3, &H6E, &HCF, &H97, &HA5, &H19, &HB4, &H5F, &H7B, &H70, &HB0, &H72, &HF2, &HF2, &HFF, &H5, &HB7, &H31, &H5A, &H5D, &HC6, &H88, &H88, &H21, &H97, &H40, &HE, &HE), "MonoXml960"
            Test.Use MonoXml1024, NewBytes(&H26, &H98, &H40, &H5F, &H30, &H4E, &H90, &H20, &H32, &H10, &H64, &HCF, &H3, &HA8, &H1E, &H53, &H20, &H19, &H59, &HCB, &H8, &H5F, &H8D, &H45, &H51, &HEE, &HDD, &H71, &H2E, &H21, &H86, &HB0, &HC6, &HE2, &H6F, &H2A, &HF2, &H8E, &HBD, &HDE, &HAD, &HA0, &H56, &H7E, &HED, &H38, &H4F, &H8D, &H3A, &HC6, &H8A, &H15, &H34, &H71, &HDE, &HC5, &H60, &H32, &H95, &H38, &HD7, &H69, &HF, &H3B, &HDF, &HF8, &H4C, &H2D, &H83, &H58, &H7E, &H36, &H4B, &H10, &H4A, &H8B, &H23, &H70, &H9, &HBE, &HCF, &H2, &H2E, &H97, &HC4, &HF, &H94, &H42, &HB, &HFA, &H1F, &H16, &H97, &H25, &H1C, &H14, &H2B, &H82, &HD0, &H7A, &HC1, &H2C, &H2F, &H72, &H9C, &HD9, &HEE, &H90, &H2F, &H5B, &HC5, &HB1, &H34, &H73, &H10, &HEC, &H79, &H97, &H9A, &HDA, &HE2, &HB4, &HAE, &H99, &HE9, &HA2, &HFF, &HC6), "MonoXml1024"
            Test.Use MonoXml1536, NewBytes(&H33, &HE2, &HA4, &HCE, &H18, &HE6, &HF3, &H46, &HE, &H32, &HD1, &HA6, &H8A, &HC3, &HCA, &H4B, &H36, &H4E, &H4C, &HAE, &H39, &H95, &H5A, &H5, &H37, &HBA, &HF, &H19, &HDC, &H94, &H6A, &H78, &HDA, &HEA, &HF0, &HA2, &H80, &H47, &HD5, &HB9, &HC3, &H53, &HC9, &HDA, &HB, &H29, &HCA, &H61, &H37, &H7C, &HD5, &H5D, &H99, &H58, &HAD, &HF, &HA8, &HEF, &H17, &HFD, &HA8, &H55, &H79, &HEF, &H7, &HD1, &H63, &HE0, &H2C, &HEF, &H14, &H42, &H72, &H2D, &H71, &HA3, &HBB, &H29, &H87, &HF8, &HCC, &HFB, &H70, &HCC, &H13, &H70, &H24, &HC3, &H2A, &H2B, &HD2, &H1C, &H34, &HD7, &H85, &HBC, &HA4, &H4E, &H7B, &H7E, &H1C, &H5B, &H3, &H6, &HB2, &H1, &HBF, &H73, &H30, &H77, &HEB, &H3, &H17, &H24, &HFE, &H46, &HC7, &H9B, &HEB, &H75, &HF6, &H56, &H43, &H1E, &HD, &H56, &H5, &H37, &H78, &HB3, &H76, &H93, &H76, &HFA, &H73, &HCD, &HE5, &HB1, &H3C, &H60, &HB7, &HCC, &H1E, &H98, &H89, &HD8, &HB4, &HA, &HD3, &H52, &HCD, &HEF, &HC1, &HBE, &HFC, &HA8, &H2C, _
                                           &HE6, &H1, &HD3, &HB3, &H5, &H5C, &H12, &H48, &HD8, &H20, &HF9, &H3B, &HAD, &H97, &HD4, &HD1, &H13, &HD6, &HA5, &H31, &H4E, &H52, &H13, &HBD, &H5C, &H0, &H5C, &H2A, &H86, &HFC, &H98, &H8B, &H93, &HAE, &H5A), "MonoXml1536"
            Test.Use MonoXml2048, NewBytes(&HA5, &H70, &H6B, &H3C, &H5E, &H5D, &H49, &H7C, &HCB, &HEE, &HE3, &H23, &HF5, &HD7, &HEE, &HF3, &HA8, &H8A, &HED, &H47, &H5F, &H2A, &H3, &H72, &H41, &H2, &H1E, &H5D, &H93, &H3B, &H27, &H4B, &H2D, &H7A, &H21, &H50, &H7B, &HDC, &HFB, &HF, &HCB, &HEB, &H8E, &HB5, &H4C, &H44, &H90, &H39, &HF0, &HCB, &H4A, &H5E, &HD7, &H67, &H5C, &H46, &HC3, &H3C, &H94, &HDC, &H33, &H36, &H36, &HA5, &HF3, &HCE, &H1F, &HA7, &H8F, &H79, &HB8, &H60, &H94, &HF, &H7A, &H87, &H18, &H12, &HCD, &H21, &H54, &H5, &H53, &HA0, &H88, &H1F, &H61, &H1F, &HAB, &HEC, &H6D, &HCF, &H10, &HE0, &H8D, &H14, &H5C, &H6A, &H46, &H8C, &HB9, &HB6, &H52, &H38, &H1F, &HAE, &HF1, &HB8, &HB5, &H9B, &H3C, &HE1, &H6E, &HBE, &H21, &H1B, &H1, &H1E, &HD9, &H1E, &H97, &H78, &H47, &HC9, &H86, &HC4, &HE7, &H58, &HF8, &HEB, &HAC, &H22, &H38, &HD4, &H2A, &HE8, &H1B, &H40, &H5F, &HAF, &H35, &HFA, &H13, &H30, &HE, &H5C, &H4C, &HF5, &HF1, &HB3, &H31, &H6C, &H1D, &H96, &HFD, &HAB, &HC4, &HE, &H16, &HA, _
                                           &HF9, &H28, &H49, &H59, &HF1, &HB6, &H35, &H2D, &H21, &H69, &H4F, &HD0, &H5B, &HB7, &H7E, &HC3, &H0, &HC7, &HDA, &H56, &H48, &HA0, &H93, &H5, &HB4, &H6D, &HEE, &H2D, &H6A, &H60, &HF6, &H91, &H7C, &HDB, &HD8, &HC3, &HFD, &H33, &HBC, &HC9, &H68, &H73, &HC6, &H64, &H49, &H80, &H3C, &HD5, &H4A, &HE1, &H28, &H5F, &HE9, &H2A, &HA7, &H1B, &HA6, &H38, &H2A, &HAE, &HA, &HA8, &HCC, &H96, &H9A, &HEA, &HE5, &HAD, &HB4, &HD8, &H70, &H2F, &HFA, &HAD, &H17, &H3, &H4D, &HDA, &H2E, &H1B, &H4D, &H88, &H82, &H3E, &H4, &H6A, &HAF, &H38, &HC1, &H4F, &H1B, &H9D, &H7, &H1A, &H67, &H6A), "MonoXml2048"
        
    End Select
End Sub

Public Sub Constructor_WhenCalled_SetsDefaults()
    Dim csp As New RSACryptoServiceProvider
    
    Assert.That csp.KeySize, Iz.EqualTo(1024), "KeySize"
    Assert.That csp.PersistKeyInCsp, Iz.False, "PersistKeyInCsp"
    Assert.That csp.PublicOnly, Iz.False, "PublicOnly"
End Sub

Public Sub Constructor_WithKeySize_SetsKeySize()
    Dim csp As RSACryptoServiceProvider
    
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    Assert.That csp.KeySize, Iz.EqualTo(MinKeySize), "KeySize"
    Assert.That csp.PersistKeyInCsp, Iz.False, "PersistKeyInCsp"
    Assert.That csp.PublicOnly, Iz.False, "PublicOnly"
End Sub

Public Sub Constructor_WithCspParameters_SetsValues()
    Dim Params  As CspParameters
    Dim csp     As RSACryptoServiceProvider
    Set Params = Cor.NewCspParameters(1, , "CorLib1024")
    
    Set csp = Cor.NewRSACryptoServiceProvider(Parameters:=Params)
    
    Assert.That csp.KeySize, Iz.EqualTo(1024), "KeySize"
    Assert.That csp.PersistKeyInCsp, Iz.True, "PersistKeyInCsp"
    Assert.That csp.PublicOnly, Iz.False, "PublicOnly"
End Sub

Public Sub Constructor_WithKeySizeAndCspParameters_SetsValues()
    Const KeySize   As Long = 512
    Dim Params      As CspParameters
    Dim csp         As RSACryptoServiceProvider
    Set Params = Cor.NewCspParameters(1, ContainerNameIn:="CorLib512")
    
    Set csp = Cor.NewRSACryptoServiceProvider(KeySize, Params)
    
    Assert.That csp.KeySize, Iz.EqualTo(KeySize), "KeySize"
    Assert.That csp.PersistKeyInCsp, Iz.True, "PersistKeyInCsp"
    Assert.That csp.PublicOnly, Iz.False, "PublicOnly"
End Sub

Public Sub Constructor_WithTooSmallKeySize_ThrowsCryptographicException()
    Const SmallKeySize As Long = 256
    On Error Resume Next
    
    With Cor.NewRSACryptoServiceProvider(SmallKeySize)
        .ToXmlString True ' called to invoke key size validation.
    End With
        
    AssertCryptographicException Err
End Sub

Public Sub Constructor_WithTooLargeKeySize_ThrowsCryptographicException()
    Const LargeKeySize As Long = 32768
    On Error Resume Next
    
    With Cor.NewRSACryptoServiceProvider(LargeKeySize)
        .ToXmlString True ' called to invoke key size validation.
    End With
        
    AssertCryptographicException Err
End Sub

Public Sub Properties_WhenCalled_ReturnsExpected()
    Dim csp As New RSACryptoServiceProvider
    Dim KeySizes() As KeySizes
    
    KeySizes = csp.LegalKeySizes
    Assert.That CorArray.Length(KeySizes), Iz.EqualTo(1), "LegalKeySizes"
    Assert.That KeySizes(0).MinSize, Iz.EqualTo(384), "LegalKeySize.MinSize"
    Assert.That KeySizes(0).MaxSize, Iz.EqualTo(16384), "LegalKeySize.MaxSize"
    Assert.That KeySizes(0).SkipSize, Iz.EqualTo(8), "LegalKeySize.SkipSize"
    Assert.That csp.KeyExchangeAlgorithm, Iz.EqualTo("RSA-PKCS1-KeyEx"), "KeyExchangeAlgorithm"
    Assert.That csp.SignatureAlgorithm, Iz.EqualTo("http://www.w3.org/2000/09/xmldsig#rsa-sha1"), "SignatureAlgorithm"
    csp.Clear
    KeySizes = csp.LegalKeySizes
    Assert.That CorArray.Length(KeySizes), Iz.EqualTo(1), "LegalKeySizes(disposed)"
    Assert.That KeySizes(0).MinSize, Iz.EqualTo(384), "LegalKeySize.MinSize(disposed)"
    Assert.That KeySizes(0).MaxSize, Iz.EqualTo(16384), "LegalKeySize.MaxSize(disposed)"
    Assert.That KeySizes(0).SkipSize, Iz.EqualTo(8), "LegalKeySize.SkipSize(disposed)"
    Assert.That csp.KeyExchangeAlgorithm, Iz.EqualTo("RSA-PKCS1-KeyEx"), "KeyExchangeAlgorithm(disposed)"
    Assert.That csp.SignatureAlgorithm, Iz.EqualTo("http://www.w3.org/2000/09/xmldsig#rsa-sha1"), "SignatureAlgorithm(disposed)"
End Sub

Public Sub SignData_WithNullArray_ThrowsArgumentNullException()
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.SignData NullBytes, SHA1.Create
    
    AssertArgumentNullException Err, "Buffer"
End Sub

Public Sub SignData_WithNullStream_ThrowsArgumentNullException()
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.SignData Nothing, SHA1.Create
    
    AssertArgumentNullException Err, "Source"
End Sub

Public Sub SignData_WithInvalidOid_ThrowsArgument()
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.SignData NewBytes(0, 0, 0, 0, 0), "1.2.3"
    
    AssertArgumentException Err, "hAlg"
End Sub

Public Sub SignData_WithOid_DoesNotThrowException()
    Dim Oid As String
    Dim csp As New RSACryptoServiceProvider
    Oid = CryptoConfig.MapNameToOID("SHA256")
    
    csp.SignData NewBytes(0, 0, 0, 0, 0), Oid
End Sub

Public Sub SignHash_WithNullArray_ThrowsArgumentNullException()
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.SignHash NullBytes, "SHA1"
    
    AssertArgumentNullException Err, "RgbHash"
End Sub

Public Sub SignHash_WithValues_IsVerified(ByVal AlgName As String, ByVal Size As Long)
    Dim Oid As String
    Dim Hash() As Byte
    Dim csp As RSACryptoServiceProvider
    
    Oid = CryptoConfig.MapNameToOID(AlgName)
    ReDim Hash(0 To Size - 1)
    Set csp = Cor.NewRSACryptoServiceProvider(1024)
    
    Dim Signature() As Byte
    Signature = csp.SignHash(Hash, Oid)
    
    Assert.That csp.VerifyHash(Hash, Oid, Signature), Iz.True
End Sub

Public Sub SignHash_WithRIPEMD160_ThrowsCryptographicException()
    Dim Hash(0 To 19) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.SignHash Hash, "RIPEMD160"
    
    AssertCryptographicException Err
End Sub

Public Sub SignHash_WithInvalidHashLength_ThrowsCryptographicException()
    Dim Hash(0 To 18) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.SignHash Hash, "SHA1"
    
    AssertCryptographicException Err
End Sub

Public Sub VerifyData_WithNullData_ThrowsArgumentNullException()
    Dim Signature(0 To 19) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.VerifyData NullBytes, "SHA1", Signature
    
    AssertArgumentNullException Err, "Buffer"
End Sub

Public Sub VerifyData_WithNullSignature_ThrowsArgumentNullException()
    Dim Hash(0 To 19) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.VerifyData Hash, "SHA1", NullBytes
    
    AssertArgumentNullException Err, "Signature"
End Sub

Public Sub VerifyHash_WithInvalidHashLength_ThrowsCryptographicException()
    Dim Hash(0 To 18) As Byte
    Dim Signature(0 To 8191) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.VerifyHash Hash, "1.3.14.3.2.26", Signature
    
    AssertCryptographicException Err
End Sub

Public Sub VerifyHash_WithNullHash_ThrowsArgumentNullException()
    Dim Signature(0 To 8191) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.VerifyHash NullBytes, "1.3.14.3.2.26", Signature
    
    AssertArgumentNullException Err, "RgbHash"
End Sub

Public Sub VerifyHash_WithNullSignature_ThrowsArgumentNullException()
    Dim Hash(0 To 19) As Byte
    Dim csp As New RSACryptoServiceProvider
    
    On Error Resume Next
    csp.VerifyHash Hash, "1.3.14.3.2.26", NullBytes
    
    AssertArgumentNullException Err, "Signature"
End Sub

Public Sub ImportExport_WithCapiXml_ShouldNotThrowException(ByVal XmlString As String, ByVal CapiName As String)
    Dim csp As New RSACryptoServiceProvider
    
    csp.FromXmlString XmlString
    Dim Actual As String
    Actual = csp.ToXmlString(True)
    
    Assert.That Actual, Iz.EqualTo(XmlString), CapiName
End Sub

Public Sub FromXmlString_WhenCapiWithoutCRT_ShouldNotThrowException(ByVal XmlString As String)
    Dim csp As New RSACryptoServiceProvider
    
    csp.FromXmlString XmlString
End Sub

Public Sub SignAndVerify_WithCapi_ShouldBeValid(ByVal XmlString As String)
    Dim Hash() As Byte
    Dim Signature() As Byte
    Dim csp As New RSACryptoServiceProvider
    Hash = NewBytes(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
    csp.FromXmlString XmlString
    Signature = csp.SignHash(Hash, "SHA1")
    
    Dim Params As RSAParameters
    Set Params = csp.ExportParameters(False)
    Dim Key As New RSACryptoServiceProvider
    Key.ImportParameters Params
    
    Assert.That Key.VerifyHash(Hash, "SHA1", Signature), Iz.True
End Sub

Public Sub SignHash_WithCapiXml384woCRT_ThrowsCryptographicException()
    Dim Hash(0 To 19) As Byte
    Dim csp As New RSACryptoServiceProvider
    csp.FromXmlString CapiXml384woCRT
    
    On Error Resume Next
    csp.SignHash Hash, "SHA1"
    
    AssertCryptographicException Err
End Sub

Public Sub ImportExport_WithMonoXml_ShouldNotThrowException(ByVal XmlString As String, ByVal MonoName As String)
    Dim csp As New RSACryptoServiceProvider

    csp.FromXmlString XmlString
    Dim Actual As String
    Actual = csp.ToXmlString(True)
    
    Assert.That Actual, Iz.EqualTo(XmlString), MonoName
End Sub

Public Sub FromXmlString_WhenMonoWithoutCRT_ShouldNotThrowException(ByVal XmlString As String)
    Dim csp As New RSACryptoServiceProvider
    
    csp.FromXmlString XmlString
End Sub

Public Sub ToXmlString_WhenIncludePrivateInfoWithoutCRT_ShouldThrowCryptographicException()
    Dim csp As New RSACryptoServiceProvider
    csp.FromXmlString CapiXml384woCRT
    
    On Error Resume Next
    csp.ToXmlString True
    
    AssertCryptographicException Err
End Sub

Public Sub ExportParameters_WhenIncludePrivateInfoWithoutCRT_ShouldThrowCryptographicException()
    Dim csp As New RSACryptoServiceProvider
    csp.FromXmlString CapiXml384woCRT
    
    On Error Resume Next
    csp.ExportParameters True
    
    AssertCryptographicException Err
End Sub

Public Sub SignAndVerify_WithMono_ShouldBeValid(ByVal XmlString As String)
    Dim Hash() As Byte
    Dim Signature() As Byte
    Dim csp As New RSACryptoServiceProvider
    Hash = NewBytes(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
    csp.FromXmlString XmlString
    Signature = csp.SignHash(Hash, "SHA1")
    
    Dim Params As RSAParameters
    Set Params = csp.ExportParameters(False)
    Dim Key As New RSACryptoServiceProvider
    Key.ImportParameters Params
    
    Assert.That Key.VerifyHash(Hash, "SHA1", Signature), Iz.True
End Sub

Public Sub VerifyHash_WithCapi_ReturnsExpected(ByVal XmlString As String, ByRef Signature() As Byte, ByVal CapiName As String)
    Dim Hash() As Byte
    Dim csp As New RSACryptoServiceProvider
    Hash = NewBytes(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
    csp.FromXmlString XmlString
    
    Assert.That csp.VerifyHash(Hash, "SHA1", Signature), Iz.True, CapiName
    Signature(0) = 0
    Assert.That csp.VerifyHash(Hash, "SHA1", Signature), Iz.False, CapiName
End Sub

Public Sub VerifyHash_WithMono_ReturnsExpected(ByVal XmlString As String, ByRef Signature() As Byte, ByVal MonoName As String)
    Dim Hash() As Byte
    Dim csp As New RSACryptoServiceProvider
    Hash = NewBytes(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
    csp.FromXmlString XmlString
    
    Assert.That csp.VerifyHash(Hash, "SHA1", Signature), Iz.True, MonoName
    Signature(0) = 0
    Assert.That csp.VerifyHash(Hash, "SHA1", Signature), Iz.False, MonoName
End Sub

Public Sub PersistKeyInCsp_WhenFalseAndClearNotCalled_StoresInSameContainer()
    Dim Params As CspParameters
    Dim csp1 As RSACryptoServiceProvider
    Set Params = Cor.NewCspParameters(1, ContainerNameIn:="PersistKeyInCsp_WhenFalseAndClearNotCalled_StoresInSameContainerAsTrue")
    Set csp1 = Cor.NewRSACryptoServiceProvider(MinKeySize, Params)
    
    Dim First As String
    Dim Second As String
    First = csp1.ToXmlString(True)
    
    Assert.That csp1.PersistKeyInCsp, Iz.True
    csp1.PersistKeyInCsp = False
    
    Dim csp2 As RSACryptoServiceProvider
    Set csp2 = Cor.NewRSACryptoServiceProvider(MinKeySize, Params)
    Second = csp2.ToXmlString(True)
    
    Assert.That First, Iz.EqualTo(Second)
End Sub

Public Sub PersistKeyInCsp_WhenTrueAndClearNotCalled_StoresInSameContainer()
    Dim Params As CspParameters
    Dim csp1 As RSACryptoServiceProvider
    Set Params = Cor.NewCspParameters(1, ContainerNameIn:="PersistKeyInCsp_WhenTrueAndClearNotCalled_StoresInSameContainer")
    Set csp1 = Cor.NewRSACryptoServiceProvider(MinKeySize, Params)

    Dim First As String
    Dim Second As String
    First = csp1.ToXmlString(True)

    Assert.That csp1.PersistKeyInCsp, Iz.True

    Dim csp2 As RSACryptoServiceProvider
    Set csp2 = Cor.NewRSACryptoServiceProvider(MinKeySize, Params)
    Second = csp2.ToXmlString(True)

    Assert.That First, Iz.EqualTo(Second)
End Sub

Public Sub PersistKeyInCsp_WhenTrueAndClearCalled_DoesNotStoresInSameContainer()
    Dim Params As CspParameters
    Dim csp1 As RSACryptoServiceProvider
    Set Params = Cor.NewCspParameters(1, ContainerNameIn:="PersistKeyInCsp_WhenTrueAndClearNotCalled_DoesNotStoresInSameContainer")
    Set csp1 = Cor.NewRSACryptoServiceProvider(MinKeySize, Params)

    Dim First As String
    Dim Second As String
    First = csp1.ToXmlString(True)

    Assert.That csp1.PersistKeyInCsp, Iz.True
    csp1.PersistKeyInCsp = False
    csp1.Clear

    Dim csp2 As RSACryptoServiceProvider
    Set csp2 = Cor.NewRSACryptoServiceProvider(MinKeySize, Params)
    Second = csp2.ToXmlString(True)

    Assert.That First, Iz.Not.EqualTo(Second)
End Sub

Public Sub UseMachineKeyStore_WhenCalled_ReturnsDefaultValue()
    Dim Actual As Boolean
    
    Actual = RSACryptoServiceProvider.UseMachineKeyStore
    
    Assert.That Actual, Iz.False
End Sub

Public Sub EncryptDecrypt_WithPKCS1_ReturnsOriginalValue()
    Dim Data(0 To 7) As Byte
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    Dim EncData() As Byte
    Dim DecData() As Byte
    EncData = csp.Encrypt(Data, False)
    DecData = csp.Decrypt(EncData, False)
    
    Assert.That DecData, Iz.EqualTo(Data)
End Sub

Public Sub EncryptDecrypt_WithfOAEP_ReturnsOriginalValue()
    Dim Data(0 To 7) As Byte
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(512)
    
    Dim EncData() As Byte
    Dim DecData() As Byte
    EncData = csp.Encrypt(Data, True)
    DecData = csp.Decrypt(EncData, True)
    
    Assert.That DecData, Iz.EqualTo(Data)
End Sub

Public Sub CspKeyContainerInfo_WhenCalledWithNewKeyPair_ReturnsExpected()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    Dim info As CspKeyContainerInfo
    Set info = csp.CspKeyContainerInfo
    
    Assert.That info.Accessible, Iz.True, "Accessible"
    Assert.That info.Exportable, Iz.True, "Exportable"
    Assert.That info.KeyContainerName, Iz.Not.Empty, "KeyContainerName"
    Assert.That info.KeyNumber, Iz.EqualTo(KeyNumber.Exchange), "KeyNumber"
    Assert.That info.MachineKeyStore, Iz.False, "MachineKeyStore"
    Assert.That info.Protected, Iz.False, "Protected"
    Assert.That info.RandomlyGenerated, Iz.True, "RandomlyGenerated"
    Assert.That info.Removable, Iz.False, "Removable"
    Assert.That info.UniqueKeyContainerName, Iz.Not.Empty, "UniqueKeyContainerName"
End Sub

Public Sub CspKeyContainerInfo_WhenCalledWithImportedKeyPair_ReturnsExpected()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    csp.ImportParameters KeyPair(True)
    
    Dim info As CspKeyContainerInfo
    Set info = csp.CspKeyContainerInfo
    
    Assert.That info.Accessible, Iz.True, "Accessible"
    Assert.That info.Exportable, Iz.True, "Exportable"
    Assert.That info.KeyContainerName, Iz.Not.Empty, "KeyContainerName"
    Assert.That info.KeyNumber, Iz.EqualTo(KeyNumber.Exchange), "KeyNumber"
    Assert.That info.MachineKeyStore, Iz.False, "MachineKeyStore"
    Assert.That info.Protected, Iz.False, "Protected"
    Assert.That info.RandomlyGenerated, Iz.True, "RandomlyGenerated"
    Assert.That info.Removable, Iz.False, "Removable"
    Assert.That info.UniqueKeyContainerName, Iz.Not.Empty, "UniqueKeyContainerName"
End Sub

Public Sub ExportCspBlob_WithPublicAndPrivate_ExportsBlob()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    csp.ImportParameters KeyPair(True)
    
    Dim Actual() As Byte
    Actual = csp.ExportCspBlob(True)
    
    Const Expected As String = "07-02-00-00-00-A4-00-00-52-53-41-32-00-04-00-00-11-00-00-00-CB-BD-1D-09-FD-E5-F8-46-59-8F-2A-CA-98-72-53-E2-7F-68-C1-F6-41-9A-7A-52-1F-A5-61-7B-2D-B1-AA-E0-4E-39-98-45-45-B2-34-88-74-53-09-06-9D-64-6A-EE-84-25-3A-D9-B7-B4-E6-3E-72-37-C7-DF-A3-E0-B8-AF-7F-80-8B-5B-8A-9D-71-19-46-EC-E1-60-0D-52-ED-76-48-CD-6F-EB-CE-48-EA-61-AB-02-5C-03-AF-BA-DF-B8-1F-F5-54-74-F0-B6-D6-40-A4-43-10-D4-EE-07-8D-36-F7-71-A8-9D-2B-AC-38-23-9C-CE-82-06-09-2F-F8-BB-99-65-FB-58-2A-BA-41-75-39-1F-9D-45-76-21-25-5B-2D-0A-04-AA-E7-FA-28-7E-3B-1E-5D-6E-23-F0-4E-12-32-F6-84-3D-9E-1A-B8-93-A4-FD-F4-AE-44-9F-EB-99-01-60-B5-A1-10-0B-81-08-C9-B3-B9-B1-81-AE-CF-EE-03-15-46-AF-00-E7-41-A4-A5-16-04-4D-52-52-33-CE-CF-B5-04-32-B4-A3-0D-EA-92-2E-B4-66-16-B4-40-98-86-9D-8B-02-35-20-0F-5A-D0-B1-66-88-D0-42-6C-3F-35-D9-D1-AA-EA-33-12-34-F6-53-F4-27-F0-B1-7F-C9-81-C9-67-1F-3C-C9-AD-74-41-47-0A-91-FC-38-2B-20-2E-9A-2E-69-F7-C1-59-FF-14-74-B7-EA-75-09-49-D9-3E-B1-F2-51-B0-54-9B-AC-" & _
                             "D0-A4-83-01-DC-DD-07-EB-5A-9A-D6-FC-23-40-E2-E4-37-03-BA-3E-A6-4C-49-54-3D-DA-36-98-5A-24-F9-39-FE-07-98-84-95-A4-99-1B-0D-22-7A-E4-8A-FD-31-E9-42-E3-8A-6F-8F-3F-80-F9-A7-46-31-4C-A9-56-05-5C-1C-99-7E-8A-3A-BD-AD-61-A9-4C-86-78-F8-B7-51-03-75-F0-0A-FF-90-02-1E-47-F7-39-80-79-25-FB-ED-66-36-EA-98-E6-56-96-0F-2E-9E-4E-2B-40-BF-67-A9-67-B1-83-58-4F-15-32-86-C9-9F-11-E2-39-CD-7F-07-93-50-88-53-34-F7-71-F2-80-B3-23-94-AE-DB-5B-26-8D-19-01-63-BB-DA-4F-6C-B0-C1-B3-1C-5B-C8-4B-3A-46-E4-3F-88-B8-B7-C2-28-94-AF-94-48-CC-CE-A1-E1-FB-DD-3E-A1-74-4F-ED-26-99-93-0A-D2-F5-BE-C3-8D-D3-2C-09-6C-C5-68-AF-6A-E5-44-94-52-A9-F1-76-1C-11-BC-CF-AC-50-59-AD-F3-7F-C9-DA-3E-C9-2E-B8-DC-7F-E3-39-A9-82-C0-A2-0D-87-D6-69-26-39-5C-5E-74-65-C4-6B-8D-99-C7-B3-10-94-B2-41-96-57-01-38-81-84-27-B4-68-06-1E-25-31-3F-F8-CD-C1-30-DB-88-B9-C4-89-F2-FA-41-53-FC-DA-A5"
    Assert.That BitConverter.ToString(Actual), Iz.EqualTo(Expected)
End Sub

Public Sub ExportCspBlob_WithPublicOnly_ReturnsExpected()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    csp.ImportParameters KeyPair(True)
    
    Dim Actual() As Byte
    Actual = csp.ExportCspBlob(False)
    
    Const Expected As String = "06-02-00-00-00-A4-00-00-52-53-41-31-00-04-00-00-11-00-00-00-CB-BD-1D-09-FD-E5-F8-46-59-8F-2A-CA-98-72-53-E2-7F-68-C1-F6-41-9A-7A-52-1F-A5-61-7B-2D-B1-AA-E0-4E-39-98-45-45-B2-34-88-74-53-09-06-9D-64-6A-EE-84-25-3A-D9-B7-B4-E6-3E-72-37-C7-DF-A3-E0-B8-AF-7F-80-8B-5B-8A-9D-71-19-46-EC-E1-60-0D-52-ED-76-48-CD-6F-EB-CE-48-EA-61-AB-02-5C-03-AF-BA-DF-B8-1F-F5-54-74-F0-B6-D6-40-A4-43-10-D4-EE-07-8D-36-F7-71-A8-9D-2B-AC-38-23-9C-CE-82-06-09-2F-F8-BB"
    Assert.That BitConverter.ToString(Actual), Iz.EqualTo(Expected)
End Sub

Public Sub ExportCspBlob_WhenExportMissingPrivateKey_ThrowsCryptographicException()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    csp.ImportParameters KeyPair(False)
    
    On Error Resume Next
    csp.ExportCspBlob True
    
    AssertCryptographicException Err
End Sub

Public Sub ExportCspBlob_WithMissingPrivateKey_ExportsPublicOnly()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    csp.ImportParameters KeyPair(False)
    
    Dim Actual() As Byte
    Actual = csp.ExportCspBlob(False)
    
    Const Expected As String = "06-02-00-00-00-A4-00-00-52-53-41-31-00-04-00-00-11-00-00-00-CB-BD-1D-09-FD-E5-F8-46-59-8F-2A-CA-98-72-53-E2-7F-68-C1-F6-41-9A-7A-52-1F-A5-61-7B-2D-B1-AA-E0-4E-39-98-45-45-B2-34-88-74-53-09-06-9D-64-6A-EE-84-25-3A-D9-B7-B4-E6-3E-72-37-C7-DF-A3-E0-B8-AF-7F-80-8B-5B-8A-9D-71-19-46-EC-E1-60-0D-52-ED-76-48-CD-6F-EB-CE-48-EA-61-AB-02-5C-03-AF-BA-DF-B8-1F-F5-54-74-F0-B6-D6-40-A4-43-10-D4-EE-07-8D-36-F7-71-A8-9D-2B-AC-38-23-9C-CE-82-06-09-2F-F8-BB"
    Assert.That BitConverter.ToString(Actual), Iz.EqualTo(Expected)
End Sub

Public Sub ImportCspBlog_WhenCalled_ImportsKeyPair()
    Dim Blob() As Byte
    Blob = NewBytes(&H7, &H2, &H0, &H0, &H0, &HA4, &H0, &H0, &H52, &H53, &H41, &H32, &H0, &H4, &H0, &H0, &H11, _
            &H0, &H0, &H0, &HCB, &HBD, &H1D, &H9, &HFD, &HE5, &HF8, &H46, &H59, &H8F, &H2A, &HCA, &H98, &H72, &H53, &HE2, &H7F, &H68, &HC1, &HF6, &H41, &H9A, &H7A, &H52, &H1F, &HA5, &H61, &H7B, &H2D, &HB1, &HAA, &HE0, &H4E, &H39, &H98, &H45, &H45, &HB2, &H34, &H88, &H74, _
            &H53, &H9, &H6, &H9D, &H64, &H6A, &HEE, &H84, &H25, &H3A, &HD9, &HB7, &HB4, &HE6, &H3E, &H72, &H37, &HC7, &HDF, &HA3, &HE0, &HB8, &HAF, &H7F, &H80, &H8B, &H5B, &H8A, &H9D, &H71, &H19, &H46, &HEC, &HE1, &H60, &HD, &H52, &HED, &H76, &H48, &HCD, &H6F, &HEB, &HCE, _
            &H48, &HEA, &H61, &HAB, &H2, &H5C, &H3, &HAF, &HBA, &HDF, &HB8, &H1F, &HF5, &H54, &H74, &HF0, &HB6, &HD6, &H40, &HA4, &H43, &H10, &HD4, &HEE, &H7, &H8D, &H36, &HF7, &H71, &HA8, &H9D, &H2B, &HAC, &H38, &H23, &H9C, &HCE, &H82, &H6, &H9, &H2F, &HF8, &HBB, &H99, _
            &H65, &HFB, &H58, &H2A, &HBA, &H41, &H75, &H39, &H1F, &H9D, &H45, &H76, &H21, &H25, &H5B, &H2D, &HA, &H4, &HAA, &HE7, &HFA, &H28, &H7E, &H3B, &H1E, &H5D, &H6E, &H23, &HF0, &H4E, &H12, &H32, &HF6, &H84, &H3D, &H9E, &H1A, &HB8, &H93, &HA4, &HFD, &HF4, &HAE, &H44, _
            &H9F, &HEB, &H99, &H1, &H60, &HB5, &HA1, &H10, &HB, &H81, &H8, &HC9, &HB3, &HB9, &HB1, &H81, &HAE, &HCF, &HEE, &H3, &H15, &H46, &HAF, &H0, &HE7, &H41, &HA4, &HA5, &H16, &H4, &H4D, &H52, &H52, &H33, &HCE, &HCF, &HB5, &H4, &H32, &HB4, &HA3, &HD, &HEA, &H92, _
            &H2E, &HB4, &H66, &H16, &HB4, &H40, &H98, &H86, &H9D, &H8B, &H2, &H35, &H20, &HF, &H5A, &HD0, &HB1, &H66, &H88, &HD0, &H42, &H6C, &H3F, &H35, &HD9, &HD1, &HAA, &HEA, &H33, &H12, &H34, &HF6, &H53, &HF4, &H27, &HF0, &HB1, &H7F, &HC9, &H81, &HC9, &H67, &H1F, &H3C, _
            &HC9, &HAD, &H74, &H41, &H47, &HA, &H91, &HFC, &H38, &H2B, &H20, &H2E, &H9A, &H2E, &H69, &HF7, &HC1, &H59, &HFF, &H14, &H74, &HB7, &HEA, &H75, &H9, &H49, &HD9, &H3E, &HB1, &HF2, &H51, &HB0, &H54, &H9B, &HAC, &HD0, &HA4, &H83, &H1, &HDC, &HDD, &H7, &HEB, &H5A, _
            &H9A, &HD6, &HFC, &H23, &H40, &HE2, &HE4, &H37, &H3, &HBA, &H3E, &HA6, &H4C, &H49, &H54, &H3D, &HDA, &H36, &H98, &H5A, &H24, &HF9, &H39, &HFE, &H7, &H98, &H84, &H95, &HA4, &H99, &H1B, &HD, &H22, &H7A, &HE4, &H8A, &HFD, &H31, &HE9, &H42, &HE3, &H8A, &H6F, &H8F, _
            &H3F, &H80, &HF9, &HA7, &H46, &H31, &H4C, &HA9, &H56, &H5, &H5C, &H1C, &H99, &H7E, &H8A, &H3A, &HBD, &HAD, &H61, &HA9, &H4C, &H86, &H78, &HF8, &HB7, &H51, &H3, &H75, &HF0, &HA, &HFF, &H90, &H2, &H1E, &H47, &HF7, &H39, &H80, &H79, &H25, &HFB, &HED, &H66, &H36, _
            &HEA, &H98, &HE6, &H56, &H96, &HF, &H2E, &H9E, &H4E, &H2B, &H40, &HBF, &H67, &HA9, &H67, &HB1, &H83, &H58, &H4F, &H15, &H32, &H86, &HC9, &H9F, &H11, &HE2, &H39, &HCD, &H7F, &H7, &H93, &H50, &H88, &H53, &H34, &HF7, &H71, &HF2, &H80, &HB3, &H23, &H94, &HAE, &HDB, _
            &H5B, &H26, &H8D, &H19, &H1, &H63, &HBB, &HDA, &H4F, &H6C, &HB0, &HC1, &HB3, &H1C, &H5B, &HC8, &H4B, &H3A, &H46, &HE4, &H3F, &H88, &HB8, &HB7, &HC2, &H28, &H94, &HAF, &H94, &H48, &HCC, &HCE, &HA1, &HE1, &HFB, &HDD, &H3E, &HA1, &H74, &H4F, &HED, &H26, &H99, &H93, _
            &HA, &HD2, &HF5, &HBE, &HC3, &H8D, &HD3, &H2C, &H9, &H6C, &HC5, &H68, &HAF, &H6A, &HE5, &H44, &H94, &H52, &HA9, &HF1, &H76, &H1C, &H11, &HBC, &HCF, &HAC, &H50, &H59, &HAD, &HF3, &H7F, &HC9, &HDA, &H3E, &HC9, &H2E, &HB8, &HDC, &H7F, &HE3, &H39, &HA9, &H82, &HC0, _
            &HA2, &HD, &H87, &HD6, &H69, &H26, &H39, &H5C, &H5E, &H74, &H65, &HC4, &H6B, &H8D, &H99, &HC7, &HB3, &H10, &H94, &HB2, &H41, &H96, &H57, &H1, &H38, &H81, &H84, &H27, &HB4, &H68, &H6, &H1E, &H25, &H31, &H3F, &HF8, &HCD, &HC1, &H30, &HDB, &H88, &HB9, &HC4, &H89, _
            &HF2, &HFA, &H41, &H53, &HFC, &HDA, &HA5)
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    csp.ImportCspBlob Blob
    
    Dim Actual() As Byte
    Actual = csp.ExportCspBlob(True)
    Assert.That Actual, Iz.EqualTo(Blob)
End Sub

Public Sub ImportCspBlog_WithPublicKey_ImportsPublicKey()
    Dim Blob() As Byte
    Blob = NewBytes(&H6, &H2, &H0, &H0, &H0, &HA4, &H0, &H0, &H52, &H53, &H41, &H31, &H0, &H4, &H0, &H0, &H11, &H0, &H0, &H0, &HCB, &HBD, &H1D, &H9, &HFD, &HE5, &HF8, &H46, &H59, &H8F, &H2A, &HCA, &H98, &H72, &H53, &HE2, &H7F, &H68, &HC1, &HF6, &H41, &H9A, &H7A, &H52, &H1F, &HA5, &H61, &H7B, &H2D, &HB1, &HAA, &HE0, _
                     &H4E, &H39, &H98, &H45, &H45, &HB2, &H34, &H88, &H74, &H53, &H9, &H6, &H9D, &H64, &H6A, &HEE, &H84, &H25, &H3A, &HD9, &HB7, &HB4, &HE6, &H3E, &H72, &H37, &HC7, &HDF, &HA3, &HE0, &HB8, &HAF, &H7F, &H80, &H8B, &H5B, &H8A, &H9D, &H71, &H19, &H46, &HEC, &HE1, &H60, &HD, &H52, &HED, &H76, &H48, &HCD, &H6F, &HEB, _
                     &HCE, &H48, &HEA, &H61, &HAB, &H2, &H5C, &H3, &HAF, &HBA, &HDF, &HB8, &H1F, &HF5, &H54, &H74, &HF0, &HB6, &HD6, &H40, &HA4, &H43, &H10, &HD4, &HEE, &H7, &H8D, &H36, &HF7, &H71, &HA8, &H9D, &H2B, &HAC, &H38, &H23, &H9C, &HCE, &H82, &H6, &H9, &H2F, &HF8, &HBB)
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    csp.ImportCspBlob Blob
    
    Dim Actual() As Byte
    Actual = csp.ExportCspBlob(False)
    Assert.That Actual, Iz.EqualTo(Blob)
End Sub

Public Sub ImportCspBlob_WithNullArray_ThrowsArgumentNullException()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    On Error Resume Next
    csp.ImportCspBlob NullBytes
    
    AssertArgumentNullException Err, "KeyBlob"
End Sub

Public Sub ImportCspBlob_WithInvalidBlob_ThrowsCryptographicException()
    Dim csp As RSACryptoServiceProvider
    Set csp = Cor.NewRSACryptoServiceProvider(MinKeySize)
    
    On Error Resume Next
    Dim Bytes(0 To 147) As Byte
    csp.ImportCspBlob Bytes
    
    AssertCryptographicException Err
End Sub

Private Function KeyPair(ByVal IncludePrivateKey As Boolean) As RSAParameters
    Dim RsaModulus() As Byte
    RsaModulus = NewBytes(&HBB, &HF8, &H2F, &H9, &H6, &H82, &HCE, &H9C, &H23, &H38, &HAC, &H2B, &H9D, &HA8, &H71, &HF7, _
            &H36, &H8D, &H7, &HEE, &HD4, &H10, &H43, &HA4, &H40, &HD6, &HB6, &HF0, &H74, &H54, &HF5, &H1F, _
            &HB8, &HDF, &HBA, &HAF, &H3, &H5C, &H2, &HAB, &H61, &HEA, &H48, &HCE, &HEB, &H6F, &HCD, &H48, _
            &H76, &HED, &H52, &HD, &H60, &HE1, &HEC, &H46, &H19, &H71, &H9D, &H8A, &H5B, &H8B, &H80, &H7F, _
            &HAF, &HB8, &HE0, &HA3, &HDF, &HC7, &H37, &H72, &H3E, &HE6, &HB4, &HB7, &HD9, &H3A, &H25, &H84, _
            &HEE, &H6A, &H64, &H9D, &H6, &H9, &H53, &H74, &H88, &H34, &HB2, &H45, &H45, &H98, &H39, &H4E, _
            &HE0, &HAA, &HB1, &H2D, &H7B, &H61, &HA5, &H1F, &H52, &H7A, &H9A, &H41, &HF6, &HC1, &H68, &H7F, _
            &HE2, &H53, &H72, &H98, &HCA, &H2A, &H8F, &H59, &H46, &HF8, &HE5, &HFD, &H9, &H1D, &HBD, &HCB)
    
    Dim RsaExponent() As Byte
    RsaExponent = NewBytes(&H11)
        
    Dim RsaP() As Byte
    RsaP = NewBytes(&HEE, &HCF, &HAE, &H81, &HB1, &HB9, &HB3, &HC9, &H8, &H81, &HB, &H10, &HA1, &HB5, &H60, &H1, _
            &H99, &HEB, &H9F, &H44, &HAE, &HF4, &HFD, &HA4, &H93, &HB8, &H1A, &H9E, &H3D, &H84, &HF6, &H32, _
            &H12, &H4E, &HF0, &H23, &H6E, &H5D, &H1E, &H3B, &H7E, &H28, &HFA, &HE7, &HAA, &H4, &HA, &H2D, _
            &H5B, &H25, &H21, &H76, &H45, &H9D, &H1F, &H39, &H75, &H41, &HBA, &H2A, &H58, &HFB, &H65, &H99)
            
    Dim RsaQ() As Byte
    RsaQ = NewBytes(&HC9, &H7F, &HB1, &HF0, &H27, &HF4, &H53, &HF6, &H34, &H12, &H33, &HEA, &HAA, &HD1, &HD9, &H35, _
            &H3F, &H6C, &H42, &HD0, &H88, &H66, &HB1, &HD0, &H5A, &HF, &H20, &H35, &H2, &H8B, &H9D, &H86, _
            &H98, &H40, &HB4, &H16, &H66, &HB4, &H2E, &H92, &HEA, &HD, &HA3, &HB4, &H32, &H4, &HB5, &HCF, _
            &HCE, &H33, &H52, &H52, &H4D, &H4, &H16, &HA5, &HA4, &H41, &HE7, &H0, &HAF, &H46, &H15, &H3)
            
    Dim RsaDP() As Byte
    RsaDP = NewBytes(&H54, &H49, &H4C, &HA6, &H3E, &HBA, &H3, &H37, &HE4, &HE2, &H40, &H23, &HFC, &HD6, &H9A, &H5A, _
            &HEB, &H7, &HDD, &HDC, &H1, &H83, &HA4, &HD0, &HAC, &H9B, &H54, &HB0, &H51, &HF2, &HB1, &H3E, _
            &HD9, &H49, &H9, &H75, &HEA, &HB7, &H74, &H14, &HFF, &H59, &HC1, &HF7, &H69, &H2E, &H9A, &H2E, _
            &H20, &H2B, &H38, &HFC, &H91, &HA, &H47, &H41, &H74, &HAD, &HC9, &H3C, &H1F, &H67, &HC9, &H81)
            
    Dim RsaDQ() As Byte
    RsaDQ = NewBytes(&H47, &H1E, &H2, &H90, &HFF, &HA, &HF0, &H75, &H3, &H51, &HB7, &HF8, &H78, &H86, &H4C, &HA9, _
            &H61, &HAD, &HBD, &H3A, &H8A, &H7E, &H99, &H1C, &H5C, &H5, &H56, &HA9, &H4C, &H31, &H46, &HA7, _
            &HF9, &H80, &H3F, &H8F, &H6F, &H8A, &HE3, &H42, &HE9, &H31, &HFD, &H8A, &HE4, &H7A, &H22, &HD, _
            &H1B, &H99, &HA4, &H95, &H84, &H98, &H7, &HFE, &H39, &HF9, &H24, &H5A, &H98, &H36, &HDA, &H3D)
            
    Dim RsaInverseQ() As Byte
    RsaInverseQ = NewBytes(&HB0, &H6C, &H4F, &HDA, &HBB, &H63, &H1, &H19, &H8D, &H26, &H5B, &HDB, &HAE, &H94, &H23, &HB3, _
            &H80, &HF2, &H71, &HF7, &H34, &H53, &H88, &H50, &H93, &H7, &H7F, &HCD, &H39, &HE2, &H11, &H9F, _
            &HC9, &H86, &H32, &H15, &H4F, &H58, &H83, &HB1, &H67, &HA9, &H67, &HBF, &H40, &H2B, &H4E, &H9E, _
            &H2E, &HF, &H96, &H56, &HE6, &H98, &HEA, &H36, &H66, &HED, &HFB, &H25, &H79, &H80, &H39, &HF7)
            
    Dim RsaD() As Byte
    RsaD = NewBytes(&HA5, &HDA, &HFC, &H53, &H41, &HFA, &HF2, &H89, &HC4, &HB9, &H88, &HDB, &H30, &HC1, &HCD, &HF8, _
            &H3F, &H31, &H25, &H1E, &H6, &H68, &HB4, &H27, &H84, &H81, &H38, &H1, &H57, &H96, &H41, &HB2, _
            &H94, &H10, &HB3, &HC7, &H99, &H8D, &H6B, &HC4, &H65, &H74, &H5E, &H5C, &H39, &H26, &H69, &HD6, _
            &H87, &HD, &HA2, &HC0, &H82, &HA9, &H39, &HE3, &H7F, &HDC, &HB8, &H2E, &HC9, &H3E, &HDA, &HC9, _
            &H7F, &HF3, &HAD, &H59, &H50, &HAC, &HCF, &HBC, &H11, &H1C, &H76, &HF1, &HA9, &H52, &H94, &H44, _
            &HE5, &H6A, &HAF, &H68, &HC5, &H6C, &H9, &H2C, &HD3, &H8D, &HC3, &HBE, &HF5, &HD2, &HA, &H93, _
            &H99, &H26, &HED, &H4F, &H74, &HA1, &H3E, &HDD, &HFB, &HE1, &HA1, &HCE, &HCC, &H48, &H94, &HAF, _
            &H94, &H28, &HC2, &HB7, &HB8, &H88, &H3F, &HE4, &H46, &H3A, &H4B, &HC8, &H5B, &H1C, &HB3, &HC1)
            
    Dim p As New RSAParameters
    If IncludePrivateKey Then
        p.d = RsaD
        p.DP = RsaDP
        p.DQ = RsaDQ
        p.p = RsaP
        p.Q = RsaQ
        p.InverseQ = RsaInverseQ
    End If
    
    p.Modulus = RsaModulus
    p.Exponent = RsaExponent
    
    Set KeyPair = p
End Function











