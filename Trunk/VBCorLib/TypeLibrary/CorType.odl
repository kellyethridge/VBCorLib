[
    helpstring("VB.EXT: CorLib Type Library 3.0"),
    uuid(1F852AFD-5C0A-46d0-8AA1-4319E8EF72C0),
    lcid(0x00000000),
    version(3.0)
]
library CorType {
    importlib("stdole2.tlb");
    importlib("msvbvm60.dll");

    // This is just for internal use.
    typedef unsigned char byte;
    typedef long  DWORD;
    typedef short WORD;
    typedef long  LPVOID;
    typedef currency curr;

    //
    // Public Enums
    //
    typedef enum BOOL 
    {
        BOOL_FALSE  = 0,
        BOOL_TRUE   = 1
    } BOOL;


    typedef enum STGC {
        STGC_DEFAULT                = 0,
        STGC_OVERWRITE              = 1,
        STGC_ONLYIFCURRENT          = 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
        STGC_CONSOLIDATE            = 8
    } STGC;

    typedef enum STATFLAG {
        STATFLAG_DEFAULT    = 0,
        STATFLAG_NONAME     = 1,
        STATFLAG_NOOPEN     = 2
    } STATFLAG;

    typedef enum STREAM_SEEK {
        STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2
    } STREAM_SEEK;

    //
    // Type Structures
    //

// forces the structures to be 4byte aligned
#pragma pack(4)
    typedef struct WIN32_FIND_DATAA {
        long dwFileAttributes;
        currency ftCreationTime;
        currency ftLastAccessTime;
        currency ftLastWriteTime;
        long nFileSizeHigh;
        long nFileSizeLow;
        long dwReserved0;
        long dwReserved1;
        byte cFileName[260];
        byte cAlternateFileName[14];
    } WIN32_FIND_DATAA;

    typedef struct WIN32_FIND_DATAW {
        long    dwFileAttributes;
        currency ftCreationTime;
        currency ftLastAccessTime;
        currency ftLastWriteTime;
        long nFileSizeHigh;
        long nFileSizeLow;
        long dwReserved0;
        long dwReserved1;
        short cFileName[260];
        short cAlternateFileName[14];
    } WIN32_FIND_DATAW;

    typedef struct WIN32_FIND_DATA {
        long dwFileAttributes;
        currency ftCreationTime;
        currency ftLastAccessTime;
        currency ftLastWriteTime;
        long nFileSizeHigh;
        long nFileSizeLow;
        long dwReserved0;
        long dwReserved1;
        BSTR cFileName;
        BSTR cAlternateFileName;
    } WIN32_FIND_DATA;

    typedef struct WIN32_FILE_ATTRIBUTE_DATA {
        long dwFileAttributes;
        currency ftCreationTime;
        currency ftLastAccessTime;
        currency ftLastWriteTime;
        long nFileSizeHigh;
        long nFileSizeLow;
    } WIN32_FILE_ATTRIBUTE_DATA;

    typedef struct SYSTEMTIME {
        short wYear;
        short wMonth;
        short wDayOfWeek;
        short wDay;
        short wHour;
        short wMinute;
        short wSecond;
        short wMilliseconds;
    } SYSTEMTIME;

    typedef struct TIME_ZONE_INFORMATION {
        long Bias;
        short StandardName[32];
        SYSTEMTIME StandardDate;
        long StandardBias;
        short DaylightName[32];
        SYSTEMTIME DaylightDate;
        long DaylightBias;
    } TIME_ZONE_INFORMATION;

    typedef struct OSVERSIONINFOA {
        long dwOSVersionInfoSize;
        long dwMajorVersion;
        long dwMinorVersion;
        long dwBuildNumber;
        long dwPlatformId;
        byte szCSDVersion[128];
    } OSVERSIONINFOA;

    typedef struct OSVERSIONINFOEXA {
        long dwOSVersionInfoSize;
        long dwMajorVersion;
        long dwMinorVersion;
        long dwBuildNumber;
        long dwPlatformId;
        byte szCSDVersion[128];
        short wServicePackMajor;
        short wServicePackMinor;
        short wSuiteMask;
        byte wProductType;
        byte wReserved;
    } OSVERSIONINFOEXA;

    typedef struct OSVERSIONINFOW {
        long dwOSVersionInfoSize;
        long dwMajorVersion;
        long dwMinorVersion;
        long dwBuildNumber;
        long dwPlatformId;
        Char szCSDVersion[128];
    } OSVERSIONINFOW;

    typedef struct OSVERSIONINFOEXW {
        long dwOSVersionInfoSize;
        long dwMajorVersion;
        long dwMinorVersion;
        long dwBuildNumber;
        long dwPlatformId;
        Char szCSDVersion[128];
        short wServicePackMajor;
        short wServicePackMinor;
        short wSuiteMask;
        byte wProductType;
        byte wReserved;
    } OSVERSIONINFOEXW;

    typedef struct PROCESS_MEMORY_COUNTERS {
        long cb;
        long PageFaultCount;
        long PeakWorkingSetSize;
        long WorkingSetSize;
        long QuotaPeakPagedPoolUsage;
        long QuotaPagedPoolUsage;
        long QuotaPeakNonPagedPoolUsage;
        long QuotaNonPagedPoolUsage;
        long PagedfileUsage;
        long PeakPagefileUsage;
    } PROCESS_MEMORY_COUNTERS;


    typedef [uuid(B87B4912-6B3D-4914-B7AA-950CA2E61482)]
    struct VBGUID {
        long Data1;
        short Data2;
        short Data3;
        byte Data4[8];
    } VBGUID;

    typedef struct STATSTG {
        long pwcsName;
        long type;
        currency cbSize;
        currency mtime;
        currency ctime;
        currency atime;
        long grfMode;
        long grfLocksSupported;
        VBGUID clsid;
        long grfStateBits;
        long reserved;
    } STATSTG;

    typedef struct SafeArrayBound {
        long cElements;
        long lLbound;
    } SafeArrayBound;

    typedef struct SafeArray1d {
        short cDims;
        short fFeatures;
        long cbElements;
        long cLocks;
        long pvData;
        long cElements;
        long lLbound;
    } SafeArray1d;

    typedef struct SafeArray {
        short cDims;
        short fFeatures;
        long cbElements;
        long cLocks;
        long pvData;
    } SafeArray;

    typedef struct USEROBJECTFLAGS {
        BOOL fInherit;
        BOOL fReserved;
        long dwFlags;
    } USEROBJECTFLAGS;

    typedef struct CPINFO {
        long MaxCharSize;
        byte DefaultChar[2];
        byte LeadByte[12];
    } CPINFO;

    typedef struct ICONINFO {
        long fIcon;
        long xHotSpot;
        long yHotSpot;
        long hbmMask;
        long hbmColor;
    } ICONINFO;

    typedef struct SYSTEM_INFO {
        DWORD dwPageSize;
        LPVOID lpMinimumApplicationAddress;
        LPVOID lpMaximumApplicationAddress;
        DWORD dwActiveProcessorMask;
        DWORD dwNumberOfProcessors;
        DWORD dwProcessorType;
        DWORD dwAllocationGranularity;
        WORD wProcessorLevel;
        WORD wProcessorRevision;
    } SYSTEM_INFO;


#pragma pack()


    //
    // Interfaces
    //
    [uuid(0000000C-0000-0000-C000-000000000046), odl]
    interface IStream : IUnknown
    {
        HRESULT Read([in] void * pv, [in] long cb, [in] long * pcbRead);
        HRESULT Write([in] void * pv, [in] long cb, [in] long * pcbWritten);
        HRESULT Seek([in] currency dLibMove, [in] long dwOrigin, [in] currency pLibNewPosition);
        HRESULT SetSize([in] currency LibNewSize);
        HRESULT CopyTo([in] IStream * pstm);
        HRESULT Commit([in] STGC grfCommitFlags);
        HRESULT Revert();
        HRESULT LockRegion([in] currency LibOffset, [in] currency cb, [in] long dwLockType);
        HRESULT UnlockRegion([in] currency LibOffset, [in] currency cb, [in] long dwLockType);
        HRESULT Stat([in] STATSTG * pstatstg, [in] long grfStatFlag);
        HRESULT Clone([out, retval] IStream ** RetVal);
    };

    [uuid(00000000-0000-0000-C000-000000000046), odl]
    interface IVBUnknown
    {
        long QueryInterface([in] void * riid, [in, out] long * ppvObj);
        long AddRef();
        long Release();
    };

    [uuid(55A2F2D0-8919-11D0-818F-00A0C90FFFC3), odl]
    interface IRecordInfo : IUnknown
    {
        HRESULT RecordInit([in] long pvNew);
        HRESULT RecordClear([in] long pvExisting);
        HRESULT RecordCopy([in] long pvExisting, [in] long pvNew);
        HRESULT GetGuid([out, retval] VBGUID * RetVal);
        HRESULT GetName([out, retval] BSTR * RetVal);
        HRESULT GetSize([out, retval] long * RetVal);
        HRESULT GetTypeInfo([out, retval] long * RetVal);
        HRESULT GetField([in] long pvData, [in] LPWSTR szFieldName, [out, retval] VARIANT * RetVal);
        HRESULT GetFieldNoCopy([in] long pvData, [in] LPWSTR szFieldName, [in] VARIANT * pvarField, [in] long * ppvDataCArray);
        HRESULT PutField([in] long wFlags, [in] long pvData, [in] LPWSTR szFieldName, [in] VARIANT * pvarField);
        HRESULT PutFieldNoCopy([in] long wFlags, [in] long pvData, [in] LPWSTR szFieldName, [in] VARIANT * pvarField);
        HRESULT GetFieldNames([in] long * pcNames, [in] BSTR * rgBstrNames);
        BOOL IsMatchingType([in] IRecordInfo * pRecordInfo);
        long RecordCreate();
        HRESULT RecordCreateCopy([in] long * pvSource, [out, retval] long * RetVal);
        HRESULT RecordDestroy([in] long pvRecord);
    };

    [uuid(CA5F4EEF-6976-4E85-AD58-A71658C7767A), odl]
    interface IHelper : IUnknown
    {
        void Swap4([in] void * x, [in] void * y);
        void Swap8([in] void * x, [in] void * y);
        void Swap16([in] void * x, [in] void * y);
        void Swap2([in] void * x, [in] void * y);
        void Swap1([in] void * x, [in] void * y);
        long DerefEBP([in] long Offset);
        void MoveVariant([in] VARIANT * Dst, [in] VARIANT * Src);
        long Ecvt([in] double Value, [in] long Precision, [in] long * Decimal, [in] long * Sign);
        long ShiftRight([in] long Value, [in] long Count);
        long ShiftLeft([in] long Value, [in] long Count);
        long UAdd([in] long x, [in] long y);
        void UAdd64([in] long * xh, [in] long * xl, [in] long yh, [in] long yl);
    };

    [uuid(083FA053-ADAB-46c4-83EA-C82DD8786DF1), odl]
    interface Action_T : IUnknown
    {
        void Invoke([in] void * Arg);
    };

    [uuid(CE820967-75F9-42bf-88AF-FE522EA86F86), odl]
    interface Action_T_T : IUnknown
    {
        void Invoke([in] void * Arg1, [in] void * Arg2);
    };

    [uuid(DCFEECAA-05A6-42fe-8EED-2496D046E138), odl]
    interface Action_T_T_T : IUnknown
    {
        void Invoke([in] void * Arg1, [in] void * Arg2, [in] void * Arg3);
    };

    [uuid(AF710B54-E600-433d-AD3D-38A165A10721), odl]
    interface Func_T_Long : IUnknown
    {
        long Invoke([in] void * Arg);
    };

    [uuid(3D2E19E1-FC9B-4e73-ABD2-9FC6CDFB2C25), odl]
    interface Func_T_T_Long : IUnknown
    {
        long Invoke([in] void * Arg1, [in] void * Arg2);
    };

    [uuid(330EAE0B-41FF-496b-951A-B985F2BEF9DC), odl]
    interface Func_T_Boolean : IUnknown
    {
        boolean Invoke([in] void * Arg);
    };

    [uuid(CF0FC6BD-E0A1-4b75-949F-5D57F5F3655E), odl]
    interface Func_T_T_Boolean : IUnknown
    {
        boolean Invoke([in] void * Arg1, [in] void * Arg2);
    };

    [uuid(B196B283-BAB4-101A-B69C-00AA00341D07), odl]
    interface IProvideClassInfo :IVBUnknown
    {
        long GetClassInfo([in] long * ppTI);
    };

    [uuid(40A8C97E-FD06-4dd0-8039-0D13B5A80ED8), odl]
    interface ISortRoutine : IUnknown
    {
        void Call([in] long * pSA, [in] long Left, [in] long Right);
    };

    //
    // Modules
    //

    [dllname("Win32Constants")]
    module Win32Constants {
        const long PAGE_EXECUTE_READWRITE = 0x40;
        
        const long MAX_PATH_A           = 0x00000104;
        const long MAX_PATH_W           = 0x00007FFF;
        
        const long FORMAT_MESSAGE_FROM_SYSTEM       = 0x00001000;
        const long FORMAT_MESSAGE_IGNORE_INSERTS    = 0x00000200;
        const long FORMAT_MESSAGE_ARGUMENT_ARRAY    = 0x00002000;        

        const long TIME_ZONE_ID_DAYLIGHT    = 0x00000002;
        const long TIME_ZONE_ID_INVALID     = 0xFFFFFFFF;
        const long TIME_ZONE_ID_STANDARD    = 0x00000001;
        const long TIME_ZONE_ID_UNKNOWN     = 0x00000000;
                
        const long E_FAIL           = 0x80004005;
        const long E_NOINTERFACE    = 0x80004002;
        const long S_OK             = 0x00000000;

        const long MAX_PATH                   = 260;
        const long MAX_DIR                    = 255;
        const long MAX_LONG_PATH              = 32000;

        const long FILE_FLAG_OVERLAPPED       = 0x40000000;
        const long FILE_ATTRIBUTE_NORMAL      = 0x80;
        const long INVALID_HANDLE_VALUE       = -1;
        const long FILE_TYPE_DISK             = 0x1;
        const long FILE_ATTRIBUTE_DIRECTORY   = 0x10;
        const long INVALID_FILE_ATTRIBUTES    = -1;
        const long INVALID_SET_FILE_POINTER   = -1;
        const long INVALID_FILE_SIZE          = -1;
        const long ERROR_BROKEN_PIPE          = 109;

        const long GENERIC_READ               = 0x80000000;
        const long GENERIC_WRITE              = 0x40000000;
        const long OPEN_EXISTING              = 3;
        const long PAGE_READONLY              = 0x2;
        const long PAGE_READWRITE             = 0x4;
        const long PAGE_WRITECOPY             = 0x8;
        const long INVALID_HANDLE             = -1;
        const long FILE_SHARE_READ            = 1;
        const long FILE_SHARE_WRITE           = 2;
        const long STANDARD_RIGHTS_REQUIRED   = 0xF0000;
        const long SECTION_QUERY              = 0x1;
        const long SECTION_MAP_WRITE          = 0x2;
        const long SECTION_MAP_READ           = 0x4;
        const long SECTION_MAP_EXECUTE        = 0x8;
        const long SECTION_EXTEND_SIZE        = 0x10;
        const long SECTION_ALL_ACCESS         = 983071;   // STANDARD_RIGHTS_REQUIRED Or SECTION_QUERY Or SECTION_MAP_WRITE Or SECTION_MAP_READ Or SECTION_MAP_EXECUTE Or SECTION_EXTEND_SIZE
        const long FILE_MAP_READ              = 0x4;      // SECTION_MAP_READ
        const long FILE_MAP_ALL_ACCESS        = 983071;   // SECTION_ALL_ACCESS
        const long NULL_HANDLE                = 0;

        const long NO_ERROR                   = 0x0;
        const long ERROR_PATH_NOT_FOUND       = 0x3;
        const long ERROR_ACCESS_DENIED        = 0x5;
        const long ERROR_FILE_NOT_FOUND       = 0x2;
        const long ERROR_INVALID_DRIVE        = 0xF;
        const long ERROR_SHARING_VIOLATION    = 0x20;
        const long ERROR_FILE_EXISTS          = 0x50;
        const long ERROR_INVALID_PARAMETER    = 0x57;
        const long ERROR_INSUFFICIENT_BUFFER  = 0x7A;
        const long ERROR_ALREADY_EXISTS       = 0xB7;
        const long ERROR_FILENAME_EXCED_RANGE = 0xCE;

        const long LOCALE_USER_DEFAULT            = 0x400;

        const long CAL_ITWODIGITYEARMAX           = 0x30;
        const long CAL_GREGORIAN                  = 1;
        const long CAL_HEBREW                     = 8;
        const long CAL_HIJRI                      = 6;
        const long CAL_JAPAN                      = 3;
        const long CAL_KOREA                      = 5;
        const long CAL_THAI                       = 7;
        const long CAL_TAIWAN                     = 4;
        const long CAL_RETURN_NUMBER              = 0x20000000;

        const long LCID_INSTALLED                 = 0x1;
        const long LCID_SUPPORTED                 = 0x2;
        const long INVARIANT_LCID                 = 127;
             
        const long ILCID                          = 0;
        const long IPARENTLCID                    = 1;
        const long ICALENDARTYPE                  = 2;
        const long IFIRSTWEEKOFYEAR               = 3;
        const long IFIRSTDAYOFWEEK                = 4;
        const long ICURRENCYDECIMALDIGITS         = 5;
        const long ICURRENCYNEGATIVEPATTERN       = 6;
        const long ICURRENCYPOSITIVEPATTERN       = 7;
        const long INUMBERDECIMALDIGITS           = 8;
        const long INUMBERNEGATIVEPATTERN         = 9;
        const long IPERCENTDECIMALDIGITS          = 10;
        const long IPERCENTNEGATIVEPATTERN        = 11;
        const long IPERCENTPOSITIVEPATTERN        = 12;

        const long SENGLISHNAME                   = 0;
        const long SDISPLAYNAME                   = 1;
        const long SNAME                          = 2;
        const long SNATIVENAME                    = 3;
        const long STHREELETTERISOLANGUAGENAME    = 4;
        const long STWOLETTERISOLANGUAGENAME      = 5;
        const long STHREELETTERWINDOWSLANGUAGENAME = 6;
        const long SOPTIONALCALENDARS             = 7;
        const long SABBREVIATEDDAYNAMES           = 8;
        const long SABBREVIATEDMONTHNAMES         = 9;
        const long SAMDESIGNATOR                  = 10;
        const long SDATESEPARATOR                 = 11;
        const long SDAYNAMES                      = 12;
        const long SLONGDATEPATTERN               = 13;
        const long SLONGTIMEPATTERN               = 14;
        const long SMONTHDAYPATTERN               = 15;
        const long SMONTHNAMES                    = 16;
        const long SPMDESIGNATOR                  = 17;
        const long SSHORTDATEPATTERN              = 18;
        const long SSHORTTIMEPATTERN              = 19;
        const long STIMESEPARATOR                 = 20;
        const long SYEARMONTHPATTERN              = 21;
        const long SALLLONGDATEPATTERNS           = 22;
        const long SALLSHORTDATEPATTERNS          = 23;
        const long SALLLONGTIMEPATTERNS           = 24;
        const long SALLSHORTTIMEPATTERNS          = 25;
        const long SALLMONTHDAYPATTERNS           = 26;
        const long SCURRENCYGROUPSIZES            = 27;
        const long SNUMBERGROUPSIZES              = 28;
        const long SPERCENTGROUPSIZES             = 29;
        const long SCURRENCYDECIMALSEPARATOR      = 30;
        const long SCURRENCYGROUPSEPARATOR        = 31;
        const long SCURRENCYSYMBOL                = 32;
        const long SNANSYMBOL                     = 33;
        const long SNEGATIVEINFINITYSYMBOL        = 34;
        const long SNEGATIVESIGN                  = 35;
        const long SNUMBERDECIMALSEPARATOR        = 36;
        const long SNUMBERGROUPSEPARATOR          = 37;
        const long SPERCENTDECIMALSEPARATOR       = 38;
        const long SPERCENTGROUPSEPARATOR         = 39;
        const long SPERCENTSYMBOL                 = 40;
        const long SPERMILLESYMBOL                = 41;
        const long SPOSITIVEINFINITYSYMBOL        = 42;
        const long SPOSITIVESIGN                  = 43;

        const long LOCALE_RETURN_NUMBER           = 0x20000000;
        const long LOCALE_ICENTURY                = 0x24;
        const long LOCALE_ICOUNTRY                = 0x5;
        const long LOCALE_ICURRDIGITS             = 0x19;
        const long LOCALE_ICURRENCY               = 0x1B;
        const long LOCALE_IDATE                   = 0x21;
        const long LOCALE_IDAYLZERO               = 0x26;
        const long LOCALE_IDEFAULTANSICODEPAGE    = 0x1004;
        const long LOCALE_IDEFAULTCODEPAGE        = 0xB;
        const long LOCALE_IDEFAULTCOUNTRY         = 0xA;
        const long LOCALE_IDEFAULTEBCDICCODEPAGE  = 0x1012;
        const long LOCALE_IDEFAULTLANGUAGE        = 0x9;
        const long LOCALE_IDEFAULTMACCODEPAGE     = 0x1011;
        const long LOCALE_IDIGITS                 = 0x11;
        const long LOCALE_IDIGITSUBSTITUTION      = 0x1014;
        const long LOCALE_IFIRSTDAYOFWEEK         = 0x100C;
        const long LOCALE_IFIRSTWEEKOFYEAR        = 0x100D;
        const long LOCALE_IINTLCURRDIGITS         = 0x1A;
        const long LOCALE_ILANGUAGE               = 0x1;
        const long LOCALE_ILDATE                  = 0x22;
        const long LOCALE_ILZERO                  = 0x12;
        const long LOCALE_IMEASURE                = 0xD;
        const long LOCALE_IMONLZERO               = 0x27;
        const long LOCALE_INEGCURR                = 0x1C;
        const long LOCALE_INEGNUMBER              = 0x1010;
        const long LOCALE_INEGSEPBYSPACE          = 0x57;
        const long LOCALE_INEGSIGNPOSN            = 0x53;
        const long LOCALE_INEGSYMPRECEDES         = 0x56;
        const long LOCALE_IOPTIONALCALENDAR       = 0x100B;
        const long LOCALE_IPAPERSIZE              = 0x100A;
        const long LOCALE_IPOSSEPBYSPACE          = 0x55;
        const long LOCALE_IPOSSIGNPOSN            = 0x52;
        const long LOCALE_IPOSSYMPRECEDES         = 0x54;
        const long LOCALE_ITIME                   = 0x23;
        const long LOCALE_ITIMEMARKPOSN           = 0x1005;
        const long LOCALE_ITLZERO                 = 0x25;
        const long LOCALE_NOUSEROVERRIDE          = 0x80000000;
        const long LOCALE_S1159                   = 0x28;
        const long LOCALE_S2359                   = 0x29;
        const long LOCALE_SABBREVCTRYNAME         = 0x7;
        const long LOCALE_SABBREVDAYNAME1         = 0x31;
        const long LOCALE_SABBREVDAYNAME2         = 0x32;
        const long LOCALE_SABBREVDAYNAME3         = 0x33;
        const long LOCALE_SABBREVDAYNAME4         = 0x34;
        const long LOCALE_SABBREVDAYNAME5         = 0x35;
        const long LOCALE_SABBREVDAYNAME6         = 0x36;
        const long LOCALE_SABBREVDAYNAME7         = 0x37;
        const long LOCALE_SABBREVLANGNAME         = 0x3;
        const long LOCALE_SABBREVMONTHNAME1       = 0x44;
        const long LOCALE_SABBREVMONTHNAME10      = 0x4D;
        const long LOCALE_SABBREVMONTHNAME11      = 0x4E;
        const long LOCALE_SABBREVMONTHNAME12      = 0x4F;
        const long LOCALE_SABBREVMONTHNAME13      = 0x100F;
        const long LOCALE_SABBREVMONTHNAME2       = 0x45;
        const long LOCALE_SABBREVMONTHNAME3       = 0x46;
        const long LOCALE_SABBREVMONTHNAME4       = 0x47;
        const long LOCALE_SABBREVMONTHNAME5       = 0x48;
        const long LOCALE_SABBREVMONTHNAME6       = 0x49;
        const long LOCALE_SABBREVMONTHNAME7       = 0x4A;
        const long LOCALE_SABBREVMONTHNAME8       = 0x4B;
        const long LOCALE_SABBREVMONTHNAME9       = 0x4C;
        const long LOCALE_SCOUNTRY                = 0x6;
        const long LOCALE_SCURRENCY               = 0x14;
        const long LOCALE_SDATE                   = 0x1D;
        const long LOCALE_SDAYNAME1               = 0x2A;
        const long LOCALE_SDAYNAME2               = 0x2B;
        const long LOCALE_SDAYNAME3               = 0x2C;
        const long LOCALE_SDAYNAME4               = 0x2D;
        const long LOCALE_SDAYNAME5               = 0x2E;
        const long LOCALE_SDAYNAME6               = 0x2F;
        const long LOCALE_SDAYNAME7               = 0x30;
        const long LOCALE_SDECIMAL                = 0xE;
        const long LOCALE_SENGCOUNTRY             = 0x1002;
        const long LOCALE_SENGCURRNAME            = 0x1007;
        const long LOCALE_SENGLANGUAGE            = 0x1001;
        const long LOCALE_SGROUPING               = 0x10;
        const long LOCALE_SINTLSYMBOL             = 0x15;
        const long LOCALE_SISO3166CTRYNAME        = 0x5A;
        const long LOCALE_SISO639LANGNAME         = 0x59;
        const long LOCALE_SLANGUAGE               = 0x2;
        const long LOCALE_SLIST                   = 0xC;
        const long LOCALE_SLONGDATE               = 0x20;
        const long LOCALE_SMONDECIMALSEP          = 0x16;
        const long LOCALE_SMONGROUPING            = 0x18;
        const long LOCALE_SMONTHNAME1             = 0x38;
        const long LOCALE_SMONTHNAME10            = 0x41;
        const long LOCALE_SMONTHNAME11            = 0x42;
        const long LOCALE_SMONTHNAME12            = 0x43;
        const long LOCALE_SMONTHNAME13            = 0x100E;
        const long LOCALE_SMONTHNAME2             = 0x39;
        const long LOCALE_SMONTHNAME3             = 0x3A;
        const long LOCALE_SMONTHNAME4             = 0x3B;
        const long LOCALE_SMONTHNAME5             = 0x3C;
        const long LOCALE_SMONTHNAME6             = 0x3D;
        const long LOCALE_SMONTHNAME7             = 0x3E;
        const long LOCALE_SMONTHNAME8             = 0x3F;
        const long LOCALE_SMONTHNAME9             = 0x40;
        const long LOCALE_SMONTHOUSANDSEP         = 0x17;
        const long LOCALE_SNATIVECTRYNAME         = 0x8;
        const long LOCALE_SNATIVECURRNAME         = 0x1008;
        const long LOCALE_SNATIVEDIGITS           = 0x13;
        const long LOCALE_SNATIVELANGNAME         = 0x4;
        const long LOCALE_SNEGATIVESIGN           = 0x51;
        const long LOCALE_SPOSITIVESIGN           = 0x50;
        const long LOCALE_SSHORTDATE              = 0x1F;
        const long LOCALE_SSORTNAME               = 0x1013;
        const long LOCALE_STHOUSAND               = 0xF;
        const long LOCALE_STIME                   = 0x1E;
        const long LOCALE_STIMEFORMAT             = 0x1003;
        const long LOCALE_SYEARMONTH              = 0x1006;
    }

    [dllname("CorTime")]
    module CorTime {
        const long TicksPerMillisecond   = 10000;
        const long SecondsPerMinute      = 60;
        const long MinutesPerHour        = 60;
        const long HoursPerDay           = 24;
        const long DaysPerWeek           = 7;
        const long DaysPerYear           = 365;
        const long MonthsPerYear         = 12;
        const long DaysPer4Years         = 1461;             // DaysPerYear * 4 + 1
        const curr MillisecondsPerTick   = 0.0001;
        const long MillisecondsPerSecond = 1000;
        const long MillisecondsPerMinute = 60000;            // MillisecondsPerSecond * corSecondsPerMinute
        const long MillisecondsPerHour   = 3600000;          // MillisecondsPerMinute * corMinutesPerHour
        const curr MillisecondsPerDay    = 86400000;         // MillisecondsPerHour * corHoursPerDay
    }

    [dllname("CorChar")]
    module CorChar {
        const short corTerminator                   = 0;
        const short corOpenParenChar                = 0x28;
        const short corCloseParenChar               = 0x29;
        const short corHyphenChar                   = 0x2D;
        const short corUpperAChar                   = 0x41;
        const short corLowerAChar                   = 0x61;
        const short corUpperBChar                   = 0x42;
        const short corLowerBChar                   = 0x62;
        const short corLowerDChar                   = 0x64;
        const short corUpperDChar                   = 0x44;
        const short corLowerEChar                   = 0x65;
        const short corUpperEChar                   = 0x45;
        const short corLowerFChar                   = 0x66;
        const short corUpperFChar                   = 0x46;
        const short corLowerGChar                   = 0x67;
        const short corUpperGChar                   = 0x47;
        const short corLowerHChar                   = 0x68;
        const short corUpperHChar                   = 0x48;
        const short corLowerMChar                   = 0x6D;
        const short corUpperMChar                   = 0x4D;
        const short corUpperNChar                   = 0x4E;
        const short corLowerNChar                   = 0x6E;
        const short corUpperPChar                   = 0x50;
        const short corLowerPChar                   = 0x70;
        const short corLowerRChar                   = 0x72;
        const short corUpperRChar                   = 0x52;
        const short corLowerSChar                   = 0x73;
        const short corLowerTChar                   = 0x74;
        const short corUpperTChar                   = 0x54;
        const short corLowerUChar                   = 0x75;
        const short corUpperUChar                   = 0x55;
        const short corUpperXChar                   = 0x58;
        const short corLowerXChar                   = 0x78;
        const short corLowerYChar                   = 0x79;
        const short corUpperYChar                   = 0x59;
        const short corUpperZChar                   = 0xFA;
        const short corLowerZChar                   = 0x7A;
        const short corOpenBraceChar                = 0x7B;
        const short corPipeChar                     = 0x7C;
        const short corCloseBraceChar               = 0x7D;
        const short corZeroChar                     = 0x30;
        const short corOneChar                      = 0x31;
        const short corFiveChar                     = 0x35;
        const short corEightChar                    = 0x38;
        const short corNineChar                     = 0x39;
        const short corPlusChar                     = 0x2B;
        const short corMinusChar                    = 0x2D;
        const short corBackslashChar                = 0x5C;
        const short corForwardSlashChar             = 0x2F;
        const short corColonChar                    = 0x3A;
        const short corSemiColonChar                = 0x3B;
        const short corLessThanChar                 = 0x3C;
        const short corEqualChar                    = 0x3D;
        const short corGreaterThanChar              = 0x3E;
        const short corReturnChar                   = 0xD;
        const short corLineFeedChar                 = 0xA;
        const short corSpaceChar                    = 0x20;
        const short corPoundChar                    = 0x23;
        const short corDollarChar                   = 0x24;
        const short corPercentChar                  = 0x25;
        const short corQuoteChar                    = 0x22;
        const short corSecondaryQuoteChar           = 0x27;
        const short corCommaChar                    = 0x2C;
        const short corPeriodChar                   = 0x2E;
        const short corTildaChar                    = 0x7E;
        const short corQuestionMarkChar             = 0x3F;
        const long corInvalidChar                   = 0xFFFFFFFF;        
        const short corPathSeparatorChar            = 0x3B;
        const short corVolumeSeparatorChar          = 0x3A;
        const short corDirectorySeparatorChar       = 0x5C;
        const short corAltDirectorySeparatorChar    = 0x2F;
        const long corDoubleDirectorySeparatorChar  = 0x005C005C;
        const LPSTR corPathSeparator                = ";";
        const LPSTR corVolumeSeparator              = ":";        
        const LPSTR corDirectorySeparator           = "\\";
        const LPSTR corAltDirectorySeparator        = "/";
    }

    [dllname("CorTypeName")]
    module CorTypeName {
        const LPSTR corNumberFormatInfo   = "NumberFormatInfo";
        const LPSTR corDateTimeFormatInfo = "DateTimeFormatInfo";        
    }

    [dllname("CorErrorCode")]
    module CorErrorCode {
        const long corInvalidProcedureCall      = 5;
        const long corOutOfMemory               = 7;
        const long corOverflow                  = 6;
        const long corSubscriptOutOfRange       = 9;
        const long corDivisionByZero            = 11;
        const long corTypeMismatch              = 13;
        const long corBadNameOrNumber           = 52;
        const long corFileNotFound              = 53;
        const long corBadFileMode               = 54;
        const long corFileAlreadyOpen           = 55;
        const long corDeviceIOError             = 57;
        const long corFileAlreadyExists         = 58;
        const long corInputPastEndOfFile        = 62;
        const long corPermissionDenied          = 70;
        const long corPathAccessError           = 75;
        const long corPathNotFound              = 76;
        const long corObjectNotSet              = 91;
        const long corNotSerializable           = 330;
        const long corInvalidPropertyValue      = 380;
        const long corInvalidPropertyArrayIndex = 381;
        const long corAutomationError           = 440;
        const long corArgumentNotOptional       = 449;
        const long corKeyAlreadyAssociated      = 457;        
    }

    [dllname("CorTypeSize")]
    module CorTypeSize {
        const long corSizeOfByte            = 1;
        const long corSizeOfInteger         = 2;
        const long corSizeOfLong            = 4;
        const long corSizeOfSingle          = 4;
        const long corSizeOfDouble          = 8;
        const long corSizeOfCurrency        = 8;
        const long corSizeOfDecimal         = 16;
        const long corSizeOfBoolean         = 1;
        const long corSizeOfDate            = 8;
        const long corSizeOfSafeArray       = 16;
        const long corSizeOfSafeArrayBound  = 8;
        const long corSizeOfSafeArray1d     = 24;
        const long corSizeOfGuid            = 16;
        const long corSizeOfGuidSafeArray1d = 40;
        const long corSizeOfVariant         = 16;
        const long corSizeOfPtr             = 4;
        const long corSizeOfChar            = 2;        
    }

    [dllname("CorVarType")]
    module CorVarType {
        const long corMissing      = 0xA;
        const long corIntegerArray = 0x2002;
        const long corByteArray    = 0x2011;
        const long corLongArray    = 0x2003;
        const long corBooleanArray = 0x200B;
        const long corStringArray  = 0x2008;
        const long corVariantArray = 0x200c;        
    }

    [dllname("HResultConstants")]
    module HResultConstants {
        const long E_POINTER                  = 0x80004003;
        const long COR_E_EXCEPTION            = 0x80131500;
        const long COR_E_SYSTEM               = 0x80131501;
        const long COR_E_RANK                 = 0x80131517;
        const long COR_E_INVALIDOPERATION     = 0x80131509;
        const long COR_E_OBJECTDISPOSED       = 0x80131622;
        const long COR_E_INVALIDCAST          = 0x80004002;
        const long COR_E_INDEXOUTOFRANGE      = 0x80131508;
        const long COR_E_ARGUMENT             = 0x80070057;
        const long COR_E_ARGUMENTOUTOFRANGE   = 0x80131502;
        const long COR_E_OUTOFMEMORY          = 0x8007000E;
        const long COR_E_FORMAT               = 0x80131537;
        const long COR_E_NOTSUPPORTED         = 0x80131515;
        const long COR_E_SERIALIZATION        = 0x8013150C;
        const long COR_E_ARRAYTYPEMISMATCH    = 0x80131503;
        const long COR_E_IO                   = 0x39;
        const long COR_E_FILENOTFOUND         = 0x35;
        const long COR_E_PLATFORMNOTSUPPORTED = 0x80131539;
        const long COR_E_PATHTOOLONG          = 0x800700CE;
        const long COR_E_DIRECTORYNOTFOUND    = 0x80070003;
        const long COR_E_ENDOFSTREAM          = 0x80070026;
        const long COR_E_ARITHMETIC           = 0x80070216;
        const long COR_E_OVERFLOW             = 0x6;
        const long COR_E_APPLICATION          = 0x80131600;
        const long COR_E_UNAUTHORIZEDACCESS   = 0x46;
        const long CORSEC_E_CRYPTO            = 0x80131430;
        const long CORSEC_E_XMLSYNTAX         = 0x80131418;

    }

    [dllname("kernel32.dll"), helpstring("Access to API functions within the Kernel32.dll system file.")]
    module Kernel32 {
        [entry("CloseHandle"), usesgetlasterror] long CloseHandle([in] long hObject);
        [entry("CopyFileW"), usesgetlasterror] long CopyFileW([in] LPWSTR Source, [in] LPWSTR Destination, [in] BOOL FailIfExists);
        [entry("RtlMoveMemory")] void CopyMemory([in] void * Destination,[in] void * Source, [in] long Length);
        [entry("CreateDirectoryW"), usesgetlasterror] long CreateDirectoryW([in] LPWSTR PathName, [in] void * SecurityAttributes);
        [entry("CreateFileW"), usesgetlasterror] long CreateFileW([in] LPWSTR FileName, [in] long DesiredAccess, [in] long ShareMode, [in] void * SecurityAttributes, [in] long CreationDisposition, [in] long FlagsAndAttributes, [in] long hTemplateFile);
        [entry("CreateFileMappingA"), usesgetlasterror] long CreateFileMappingA([in] long hFile, [in] void * SecurityAttributes, [in] long Protect, [in] long MaximumSizeHigh, [in] long MaximumSizeLow, [in] LPSTR Name);
        [entry("CreateFileMappingW"), usesgetlasterror] long CreateFileMappingW([in] long hFile, [in] void * SecurityAttributes, [in] long Protect, [in] long MaximumSizeHigh, [in] long MaximumSizeLow, [in] LPWSTR Name);
        [entry("DeleteFileW"), usesgetlasterror] long DeleteFileW([in] LPWSTR FileName);
        [entry("EnumResourceLanguagesW"), usesgetlasterror] long EnumResourceLanguages([in] long hModule, [in] long lpType, [in] long lpName, [in] long lpEnumFunc, [in] long lParam);
        [entry("EnumResourceNamesW"), usesgetlasterror] long EnumResourceNames([in] long hModule, [in] long lpType, [in] long lpEnumFunc, [in] long lParam);
        [entry("EnumResourceTypesW"), usesgetlasterror] long EnumResourceTypes([in] long hModule, [in] long lpEnumFunc, [in] long lParam);
        [entry("ExpandEnvironmentStringsA"), usesgetlasterror] long ExpandEnvironmentStringsA([in] LPSTR lpSrc, [in] LPSTR lpDst, [in] long nSize);
        [entry("ExpandEnvironmentStringsW"), usesgetlasterror] long ExpandEnvironmentStringsW([in] LPWSTR lpSrc, [in] LPWSTR lpDst, [in] long nSize);
        [entry("FindClose"), usesgetlasterror] long FindClose([in] long hFile);
        [entry("FindFirstFileW"), usesgetlasterror] long FindFirstFileW([in] LPWSTR FileName, [in] WIN32_FIND_DATAW * FindFileData);
        [entry("FindNextFileW"), usesgetlasterror] long FindNextFileW([in] long hFindFile, [in] WIN32_FIND_DATAW * FindFileData);
        [entry("FindResourceExW"), usesgetlasterror] long FindResourceEx([in] long hModule, [in] long lpType, [in] long lpName, [in] short wLanguage);
        [entry("FormatMessageA"), usesgetlasterror] long FormatMessageA([in] long dwFlags, [in] void * lpSource, [in] long dwMessageId, [in] long dwLanguageId,[in] LPSTR lpBuffer, [in] long nSize, [in] long Arguments);
        [entry("FreeEnvironmentStringsA"), usesgetlasterror] long FreeEnvironmentStringsA([in] long lpszEnvironmentBlock);
        [entry("FreeEnvironmentStringsW"), usesgetlasterror] long FreeEnvironmentStringsW([in] long lpszEnvironmentBlock);
        [entry("FreeLibrary"), usesgetlasterror] long FreeLibrary([in] long hModule);
        [entry("GetCommandLineW")] long GetCommandLineW();
        [entry("GetComputerNameA"), usesgetlasterror] long GetComputerNameA([in] LPSTR lpBuffer, [in] long * lpnSize);
        [entry("GetComputerNameW"), usesgetlasterror] long GetComputerNameW([in] LPWSTR lpBuffer, [in] long * lpnSize);
        [entry("GetCurrentDirectoryA"), usesgetlasterror] long GetCurrentDirectoryA([in] long BufferLength, [in] LPSTR Buffer);
        [entry("GetCurrentDirectoryW"), usesgetlasterror] long GetCurrentDirectoryW([in] long BufferLength, [in] LPWSTR Buffer);
        [entry("GetCurrentProcess")] long GetCurrentProcess();
        [entry("GetEnvironmentStringsA")] long GetEnvironmentStringsA();
        [entry("GetEnvironmentStringsW")] long GetEnvironmentStringsW();
        [entry("GetEnvironmentVariableA"), usesgetlasterror] long GetEnvironmentVariableA([in] LPSTR lpName, [in] LPSTR lpBuffer, [in] long nSize);
        [entry("GetEnvironmentVariableW"), usesgetlasterror] long GetEnvironmentVariableW([in] LPWSTR lpName, [in] LPWSTR lpBuffer, [in] long nSize);
        [entry("GetFileAttributesA"), usesgetlasterror] long GetFileAttributesA([in] LPSTR FileName);
        [entry("GetFileAttributesW"), usesgetlasterror] long GetFileAttributesW([in] LPWSTR FileName);
        [entry("GetFileAttributesExA"), usesgetlasterror] long GetFileAttributesExA([in] LPSTR FileName, [in] long InfoLevelId, [in] void * FileInformation);
        [entry("GetFileAttributesExW"), usesgetlasterror] long GetFileAttributesExW([in] LPWSTR FileName, [in] long InfoLevelId, [in] void * FileInformation);
        [entry("GetFileSize"), usesgetlasterror] long GetFileSize([in] long hFile, [in] void * lpFileSizeHigh);
        [entry("GetFileType"), usesgetlasterror] long GetFileType([in] long hFile);
        [entry("GetFullPathNameA"), usesgetlasterror] long GetFullPathNameA([in] LPSTR FileName, [in] long BufferLength, [in] LPSTR Buffer, [in] void * FilePart);
        [entry("GetFullPathNameW"), usesgetlasterror] long GetFullPathNameW([in] void * FileName, [in] long BufferLength, [in] void * Buffer, [in] void * FilePart);
        [entry("GetLocaleInfoA"), usesgetlasterror] long GetLocaleInfoA([in] long Locale, [in] long LCType, [in] LPSTR lpLCData, [in] long cchData);
        [entry("GetLocaleInfoW"), usesgetlasterror] long GetLocaleInfoW([in] long Locale, [in] long LCType, [in] LPWSTR lpLCData, [in] long cchData);
        [entry("GetLocalTime")] void GetLocalTime([in] SYSTEMTIME * lpSystemTime);
        [entry("GetLogicalDrives"), usesgetlasterror] long GetLogicalDrives();
        [entry("GetProcAddress"), usesgetlasterror] long GetProcAddress([in] long hModule, [in] LPSTR lpProcName);
        [entry("GetSystemDefaultLCID")] long GetSystemDefaultLCID();
        [entry("GetSystemDirectoryA"), usesgetlasterror] long GetSystemDirectoryA([in] LPSTR Buffer, [in] long Size);
        [entry("GetSystemDirectoryW"), usesgetlasterror] long GetSystemDirectoryW([in] LPWSTR Buffer, [in] long Size);
        [entry("GetSystemTime")] void GetSystemTime([in] SYSTEMTIME * lpSystemTime);
        [entry("GetTempFileNameA"), usesgetlasterror] long GetTempFileNameA([in] LPSTR PathName, [in] LPSTR PrefixString, [in] long Unique, [in] LPSTR TempFileName);
        [entry("GetTempFileNameW"), usesgetlasterror] long GetTempFileNameW([in] LPWSTR PathName, [in] LPWSTR PrefixString, [in] long Unique, [in] LPWSTR TempFileName);
        [entry("GetTempPathA"), usesgetlasterror] long GetTempPathA([in] long BufferLength, [in] LPSTR Buffer);
        [entry("GetTempPathW"), usesgetlasterror] long GetTempPathW([in] long BufferLength, [in] LPWSTR Buffer);
        [entry("GetTimeZoneInformation"), usesgetlasterror] long GetTimeZoneInformation([in] TIME_ZONE_INFORMATION * lpTimeZoneInformation);
        [entry("GetUserDefaultLCID")] long GetUserDefaultLCID();
        [entry("GetVersionExA"), usesgetlasterror] long GetVersionExA([in] void * lpVersionInfo);
        [entry("GetVersionExW"), usesgetlasterror] long GetVersionExW([in] void * lpVersionInfo);
        [entry("IsValidLocale")] long IsValidLocale([in] long LCID, [in] long dwFlags);
        [entry("LoadLibraryA"), usesgetlasterror] long LoadLibraryA([in] LPSTR lpFileName);
        [entry("LoadResource"), usesgetlasterror] long LoadResource([in] long hModule, [in] long hResInfo);
        [entry("LockFile"), usesgetlasterror] long LockFile([in] long hFile, [in] long dwFileOffsetLow, [in] long dwFileOffsetHigh, [in] long nNumberOfBytesToLockLow, [in] long nNumberOfBytesToLockHigh);
        [entry("LockResource")] long LockResource([in] long hResData);
        [entry("lstrlen")] long lstrlen([in] long lpString);
        [entry("MapViewOfFile"), usesgetlasterror] long MapViewOfFile([in] long hFileMappingObject, [in] long dwDesiredAccess, [in] long dwFileOffsetHigh, [in] long dwFileOffsetLow, [in] long dwNumberOfBytesToMap);
        [entry("MoveFileA"), usesgetlasterror] long MoveFileA([in] LPSTR ExistingFileName, [in] LPSTR NewFileName);
        [entry("MoveFileW"), usesgetlasterror] long MoveFileW([in] LPWSTR ExistingFileName, [in] LPWSTR NewFileName);
        [entry("ReadFile"), usesgetlasterror] long ReadFile([in] long hFile, [in] void * lpBuffer, [in] long nNumberOfBytesToRead, [in] long * lpNumberOfBytesRead, [in] void * lpOverlapped);
        [entry("RemoveDirectoryA"), usesgetlasterror] long RemoveDirectoryA([in] LPSTR PathName);
        [entry("RemoveDirectoryW"), usesgetlasterror] long RemoveDirectoryW([in] LPWSTR PathName);
        [entry("SetCurrentDirectoryA"), usesgetlasterror] long SetCurrentDirectoryA([in] LPSTR PathName);
        [entry("SetCurrentDirectoryW"), usesgetlasterror] long SetCurrentDirectoryW([in] LPWSTR PathName);
        [entry("SetEndOfFile"), usesgetlasterror] long SetEndOfFile([in] long hFile);
        [entry("SetEnvironmentVariableA"), usesgetlasterror] long SetEnvironmentVariableA([in] LPSTR lpName, [in] LPSTR lpValue);
        [entry("SetEnvironmentVariableW"), usesgetlasterror] long SetEnvironmentVariableW([in] LPWSTR lpName, [in] LPWSTR lpValue);
        [entry("SetFileAttributesA"), usesgetlasterror] long SetFileAttributesA([in] LPSTR FileName, [in] long FileAttributes);
        [entry("SetFileAttributesW"), usesgetlasterror] long SetFileAttributesW([in] LPWSTR FileName, [in] long FileAttributes);
        [entry("SetFilePointer"), usesgetlasterror] long SetFilePointer([in] long hFile, [in] long lDistanceToMove, [in] void * lpDistanceToMoveHigh, [in] long dwMoveMethod);
        [entry("SetFileTime"), usesgetlasterror] long SetFileTime([in] long hFile, [in] void * lpCreationTime, [in] void * lpLastAccessTime, [in] void * lpLastWriteTime);
        [entry("SizeofResource"), usesgetlasterror] long SizeofResource([in] long hModule, [in] long hResInfo);
        [entry("UnlockFile"), usesgetlasterror] long UnlockFile([in] long hFile, [in] long dwFileOffsetLow, [in] long dwFileOffsetHigh, [in] long nNumberOfBytesToUnlockLow, [in] long nNumberOfBytesToUnlockHigh);
        [entry("UnmapViewOfFile"), usesgetlasterror] long UnmapViewOfFile([in] long lpBaseAddress);
        [entry("WriteFile"), usesgetlasterror] long WriteFile([in] long hFile, [in] void * lpBuffer, [in] long nNumberOfBytesToWrite, [in] long * lpNumberOfBytesWritten, [in] void * lpOverlapped);
        [entry("RtlZeroMemory")] void ZeroMemory([in] void * Destination, [in] long Length);
        [entry("WritePrivateProfileStringA"), usesgetlasterror] long WritePrivateProfileStringA([in] LPSTR lpAppName, [in] LPSTR lpKeyName, [in] LPSTR lpString, [in] LPSTR lpFileName);
        [entry("WritePrivateProfileStringW"), usesgetlasterror] long WritePrivateProfileStringW([in] LPWSTR lpAppName, [in] LPWSTR lpKeyName, [in] LPWSTR lpString, [in] LPWSTR lpFileName);
        [entry("WritePrivateProfileSectionA"),usesgetlasterror] long WritePrivateProfileSectionA([in] LPSTR lpAppName, [in] LPSTR lpString, [in] LPSTR lpFileName);
        [entry("WritePrivateProfileSectionW"),usesgetlasterror] long WritePrivateProfileSectionW([in] LPWSTR lpAppName, [in] LPWSTR lpString, [in] LPWSTR lpFileName);
        [entry("GetPrivateProfileStringA")] long GetPrivateProfileStringA([in] LPSTR lpAppName, [in] LPSTR lpKeyName, [in] LPSTR lpDefault, [in] LPSTR lpReturnedString, [in] long nSize, [in] LPSTR lpFileName);
        [entry("GetPrivateProfileStringW")] long GetPrivateProfileStringW([in] LPWSTR lpAppName, [in] LPWSTR lpKeyName, [in] LPWSTR lpDefault, [in] LPWSTR lpReturnedString, [in] long nSize, [in] LPWSTR lpFileName);
        [entry("GetPrivateProfileSectionA")] long GetPrivateProfileSectionA([in] LPSTR lpAppName, [in] LPSTR lpReturnedString, [in] long nSize, [in] LPSTR lpFileName);
        [entry("GetPrivateProfileSectionW")] long GetPrivateProfileSectionW([in] LPWSTR lpAppName, [in] LPWSTR lpReturnedString, [in] long nSize, [in] LPWSTR lpFileName);
        [entry("IsDBCSLeadByteEx"), usesgetlasterror] long IsDBCSLeadByteEx([in] long CodePage, [in] byte TestChar);
        [entry("MultiByteToWideChar"), usesgetlasterror] long MultiByteToWideChar([in] long CodePage, [in] long dwFlags, [in] void * lpMultiByteStr, [in] long cbMultiByte, [in] void * lpWideCharStr, [in] long cchWideChar);
        [entry("GetACP")] long GetACP();
        [entry("QueryPerformanceCounter"), usesgetlasterror] long QueryPerformanceCounter([in] CURRENCY * lpPerformanceCount);
        [entry("QueryPerformanceFrequency"), usesgetlasterror] long QueryPerformanceFrequency([in] CURRENCY * lpFrequency);
        [entry("GetCPInfo"), usesgetlasterror] long GetCPInfo([in] long CodePage, [in] CPINFO * lpCPInfo);
        [entry("WideCharToMultiByte"), usesgetlasterror] long WideCharToMultiByte([in] long CodePage, [in] long dwFlags, [in] short * lpWideCharStr, [in] long cchWideChar, [in] byte * lpMultiByteStr, [in] long cchMultiByte, [in] LPSTR lpDefaultChar, [in] long lpUsedDefaultChar);
        [entry("GetCalendarInfoA"), usesgetlasterror] long GetCalendarInfo([in] long Locale, [in] long Calendar, [in] long CalType, [in] LPSTR lpCalData, [in] long cchData, [in] void * lpValue);
        [entry("GetVolumeInformationA"), usesgetlasterror] long GetVolumeInformation([in] LPSTR lpRootPathName, [in] LPSTR lpVolumeNameBuffer, [in] long nVolumeNameSize, [in] void * lpVolumeSerialNumber, [in] long * lpMaximumComponentLength, [in] long * lpFileSystemFlags, [in] LPSTR lpFileSystemNameBuffer, [in] long nFileSystemNameSize);
        [entry("SetVolumeLabelA"), usesgetlasterror] long SetVolumeLabel([in] LPSTR lpRootPathName, [in] LPSTR lpVolumeName);
        [entry("GetDriveTypeA")] long GetDriveType([in] LPSTR lpRootPathName);
        [entry("GetDiskFreeSpaceExA"), usesgetlasterror] long GetDiskFreeSpaceEx([in] LPSTR lpDirectoryName, [in] CURRENCY * lpFreeBytesAvailableToCaller, [in] CURRENCY * lpTotalNumberOfBytes, [in] CURRENCY * lpTotalNumberOfFreeBytes);
        [entry("GetLongPathNameA"), usesgetlasterror] long GetLongPathNameA([in] LPSTR lpszShortPath, [in] LPSTR lpszLongPath, [in] long cchBuffer);
        [entry("GetLongPathNameW"), usesgetlasterror] long GetLongPathNameW([in] void * lpszShortPath, [in] void * lpszLongPath, [in] long cchBuffer);
        [entry("RtlFillMemory")] void FillMemory([in] void * Destination, [in] long Length, [in] byte Fill);
        [entry("GetSystemInfo")] void GetSystemInfo([in] SYSTEM_INFO * lpSystemInfo);
        [entry("GetUserDefaultUILanguage")] long GetUserDefaultUILanguage();
        [entry("GetSystemDefaultUILanguage")] long GetSystemDefaultUILanguage();
        [entry("GetModuleFileNameW"), usesgetlasterror] long GetModuleFileNameW([in] long hModule, [in] LPWSTR lpFileName, [in] long nSize);
        [entry("GetCurrentProcessId")] long GetCurrentProcessId();
        [entry("VirtualProtect"), usesgetlasterror] long VirtualProtect([in] void * lpAddress, [in] long dwSize, [in] long flNewProtect, [in] long * lpflOldProtect);
    }

    [dllname("oleaut32.dll"), helpstring("Access to API functions within the Oleaut32.dll system file.")]
    module OleAut32 {
        const long FADF_AUTO            = 0x00000001;
        const long FADF_BSTR            = 0x00000100;
        const long FADF_DISPATCH        = 0x00000400;
        const long FADF_EMBEDDED        = 0x00000004;
        const long FADF_FIXEDSIZE       = 0x00000010;
        const long FADF_HAVEIID         = 0x00000040;
        const long FADF_HAVEVARTYPE     = 0x00000080;
        const long FADF_RECORD          = 0x00000020;
        const long FADF_STATIC          = 0x00000002;
        const long FADF_UNKNOWN         = 0x00000200;
        const long FADF_VARIANT         = 0x00000800;

        const long FFEATURES_OFFSET     = 2;
        const long CBELEMENTS_OFFSET    = 4;
        const long PVDATA_OFFSET        = 12;
        const long LBOUND_OFFSET        = 20;
        const long CLOCKS_OFFSET        = 8;
        const long CELEMENTS_OFFSET     = 16;

        [entry("OleLoadPicture")] HRESULT OleLoadPicture([in] IStream * pStream, [in] long lSize, [in] BOOL fRunmode, [in] VBGUID * riid, [in] void * ppvObj);
        [entry("SafeArrayCopyData")] HRESULT SafeArrayCopyData([in] long psaSource, [in] long psaTarget);
        [entry("SafeArrayCreate")] long SafeArrayCreate([in] VBA.vbVarType vt, [in] long cDims, [in] SafeArrayBound * rgsaBounds);
        [entry("SafeArrayCreateVector")] long SafeArrayCreateVector([in] VBA.vbVarType vt, [in] long lLbound, [in] long cElements);
        [entry("SafeArrayCreateVectorEx")] long SafeArrayCreateVectorEx([in] VBA.vbVarType vt, [in] long lLbound, [in] long cElements, [in, defaultvalue(0)] long pvExtra);
        [entry("SafeArrayDestroyData")] HRESULT SafeArrayDestroyData([in] long psa);
        [entry("SafeArrayGetDim")] long SafeArrayGetDim([in] long psa);
        [entry("SafeArrayGetElemsize")] long SafeArrayGetElemsize([in] long psa);
        [entry("SafeArrayGetLBound")] HRESULT SafeArrayGetLBound([in] long psa, [in] long nDim, [out, retval] long * plLbound);
        [entry("SafeArrayGetRecordInfo")] HRESULT SafeArrayGetRecordInfo([in] long psa, [out, retval] IRecordInfo ** RetVal);
        [entry("SafeArrayGetUBound")] HRESULT SafeArrayGetUBound([in] long psa, [in] long nDim, [out, retval] long * RetVal);
        [entry("SafeArrayGetVartype")] HRESULT SafeArrayGetVartype([in] long psa, [out, retval] VBA.vbVarType * RetVal);
        [entry("SafeArrayLock")] HRESULT SafeArrayLock([in] long psa);
        [entry("SafeArrayUnlock")] HRESULT SafeArrayUnlock([in] long psa);
        [entry("SysAllocString")] BSTR SysAllocString([in] long sz);
        [entry("SysAllocStringLen")] BSTR SysAllocStringLen([in] long psz, [in] long cch);
        [entry("VariantCopy")] HRESULT VariantCopy([in] VARIANT * pvarDest, [in] VARIANT * pvarSrc);
        [entry("VariantCopyInd")] HRESULT VariantCopyInd([in] VARIANT * pvarDest, [in] VARIANT * pvarSrc);
        [entry("OleCreatePictureIndirect")] long OleCreatePictureIndirect([in] void * lpPictDesc, [in] VBGUID * riid, [in] long fOwn, [in] void * lplpvObj);
    }

    [dllname("ole32.dll"), helpstring("Access to API functions within the Ole32.dll system file.")]
    module Ole32 {
        const long VARIANTDATA_OFFSET   = 8;
        const long VT_BYREF             = 0x4000;
        const long PICTYPE_BITMAP       = 1;

        [entry("CLSIDFromProgID")] HRESULT CLSIDFromProgID([in] LPWSTR ProgID, [out, retval] VBGUID * RetVal);
        [entry("CLSIDFromString")] HRESULT CLSIDFromString([in] LPWSTR lpSz, [out, retval] VBGUID * RetVal);
        [entry("CoCreateGuid")] HRESULT CoCreateGuid([out, retval] VBGUID * RetVal);
        [entry("CoTaskMemAlloc")] long CoTaskMemAlloc([in] long cb);
        [entry("CoTaskMemFree")] void CoTaskMemFree([in] long pv);
        [entry("CreateStreamOnHGlobal")] void CreateStreamOnHGlobal([in] long hGlobal, [in] BOOL fDeleteOnRelease, [in, out] IStream ** Stream);
        [entry("IIDFromString")] HRESULT GUIDFromString([in] LPWSTR lpsz, [out, retval] VBGUID * RetVal);
        [entry("IsEqualGUID")] long IsEqualGUID([in] void * rguid1, [in] void * rguid2);
        [entry("StringFromGUID2")] long StringFromGUID2([in] VBGUID * rguid, [in] LPWSTR lpsz, [in] long cbMax);
        [entry("ProgIDFromCLSID")] long ProgIDFromCLSID([in] VBGUID * CLSID, [in] long * lplpszProgID);
    }

    [dllname("CryptoConstants"), helpstring("Defined constants for crypto api.")]
    module CryptoConstants {
        const LPSTR OID_RSA_SMIMEalgCMS3DESwrap = "1.2.840.113549.1.9.16.3.6";
        const LPSTR OID_RSA_MD5                 = "1.2.840.113549.2.5";
        const LPSTR OID_RSA_RC2CBC              = "1.2.840.113549.3.2";
        const LPSTR OID_RSA_DES_EDE3_CBC        = "1.2.840.113549.3.7";
        const LPSTR OID_OIWSEC_desCBC           = "1.3.14.3.2.7";
        const LPSTR OID_OIWSEC_SHA1             = "1.3.14.3.2.26";
        const LPSTR OID_OIWSEC_SHA256           = "2.16.840.1.101.3.4.2.1";
        const LPSTR OID_OIWSEC_SHA384           = "2.16.840.1.101.3.4.2.2";
        const LPSTR OID_OIWSEC_SHA512           = "2.16.840.1.101.3.4.2.3";
        const LPSTR OID_OIWSEC_RIPEMD160        = "1.3.36.3.2.1";
    }

    [dllname("advapi32.dll"), helpstring("Access to API functions within the Advapi32.dll system file.")]
    module Advapi32 {
        const long REG_NONE                   = 0;
        const long REG_UNKNOWN                = 0;
        const long REG_SZ                     = 1;
        const long REG_DWORD                  = 4;
        const long REG_BINARY                 = 3;
        const long REG_MULTI_SZ               = 7;
        const long REG_EXPAND_SZ              = 2;
        const long REG_QWORD                  = 11;

        const long ERROR_SUCCESS              = 0;
        const long ERROR_INVALID_HANDLE       = 6;
        const long ERROR_INVALID_PARAMETER    = 87;
        const long ERROR_CALL_NOT_IMPLEMENTED = 120;
        const long ERROR_MORE_DATA            = 234;
        const long ERROR_NO_MORE_ITEMS        = 259;
        const long ERROR_CANTOPEN             = 1011;
        const long ERROR_CANTREAD             = 1012;
        const long ERROR_CANTWRITE            = 1013;
        const long ERROR_REGISTRY_RECOVERED   = 1014;
        const long ERROR_REGISTRY_CORRUPT     = 1015;
        const long ERROR_REGISTRY_IO_FAILED   = 1016;
        const long ERROR_NOT_REGISTRY_FILE    = 1017;
        const long ERROR_KEY_DELETED          = 1018;

        const long HKEY_CLASSES_ROOT      = 0x80000000;
        const long HKEY_CURRENT_CONFIG    = 0x80000005;
        const long HKEY_CURRENT_USER      = 0x80000001;
        const long HKEY_DYN_DATA          = 0x80000006;
        const long HKEY_LOCAL_MACHINE     = 0x80000002;
        const long HKEY_USERS             = 0x80000003;
        const long HKEY_PERFORMANCE_DATA  = 0x80000004;

        const long READ_CONTROL           = 0x20000;
        const long STANDARD_RIGHTS_ALL    = 0x1F0000;
        const long STANDARD_RIGHTS_READ   = 0x20000;   //READ_CONTROL
        const long KEY_QUERY_VALUE        = 0x1;
        const long KEY_SET_VALUE          = 0x2;
        const long KEY_CREATE_SUB_KEY     = 0x4;
        const long KEY_ENUMERATE_SUB_KEYS = 0x8;
        const long KEY_CREATE_LINK        = 0x20;
        const long KEY_NOTIFY             = 0x10;
        const long SYNCHRONIZE            = 0x100000;
        const long KEY_READ               = 0x20019;   // ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
        const long KEY_ALL_ACCESS         = 0xF003F;   // ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))

        const long PROV_RSA_FULL           = 1;
        const long PROV_DSS_DH             = 13;
        const long PROV_RSA_AES            = 24;

        const long KP_IV                   = 1;
        const long KP_MODE                 = 4;
        const long KP_MODE_BITS            = 5;
        const long KP_EFFECTIVE_KEYLEN     = 19;
        const long KP_SALT                 = 2;
        const long KP_PERMISSIONS          = 6;

        const long PP_NAME                 = 4;
        const long PP_UNIQUE_CONTAINER     = 36;
        const long PP_CONTAINER            = 6;
        const long PP_PROVTYPE             = 16;
        const long PP_ENUMALGS             = 1;

        const long ALG_CLASS_DATA_ENCRYPT  = 0x6000;    //(3 * 2 ^ 13)
        const long ALG_TYPE_BLOCK          = 0x600;     //(3 * 2 ^ 9)
        const long ALG_SID_DES             = 0x1;
        const long ALG_SID_RC2             = 0x2;
        const long ALG_SID_3DES            = 0x3;
        const long ALG_SID_3DES_112        = 0x9;
        const long ALG_CLASS_HASH          = 0x8000;    //(4 * 2 ^ 13)
        const long ALG_TYPE_ANY            = 0x0;
        const long ALG_SID_SHA1            = 0x4;
        const long ALG_SID_MD5             = 0x3;
        const long ALG_CLASS_KEY_EXCHANGE  = 0xA000;    //(5 * 2 ^ 13)
        const long ALG_TYPE_RSA            = 0x400;     //(2 * 2 ^ 9)
        const long ALG_SID_RSA_ANY         = 0x0;
        const long ALG_CLASS_SIGNATURE     = 0x2000;    //(1 * 2 ^ 13)
        const long ALG_SID_DSS_ANY         = 0x0;
        const long ALG_TYPE_DSS            = 0x200;     //(1 * 2 ^ 9);

        const long CALG_DES                = 0x6601;        //(ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DES)
        const long CALG_RC2                = 0x6602;        //(ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC2)
        const long CALG_3DES               = 0x6603;        //(ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES)
        const long CALG_3DES_112           = 0x6609;        //(ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES_112)
        const long CALG_SHA1               = 0x8004;        //(ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1)
        const long CALG_MD5                = 0x8003;        //(ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD5)
        const long CALG_RSA_KEYX           = 0xA400;        //(ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
        const long CALG_RSA_SIGN           = 0x2400;        //(ALG_CLASS_SIGNATURE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
        const long CALG_DSS_SIGN           = 0x2200;        //(ALG_CLASS_SIGNATURE Or ALG_TYPE_DSS Or ALG_SID_DSS_ANY)
        const long CALG_SHA_256            = 0x800C;
        const long CALG_SHA_384            = 0x800D;
        const long CALG_SHA_512            = 0x800E;

        const long CRYPT_OAEP              = 0x40;
        const long CRYPT_EXPORTABLE        = 0x1;
        const long CRYPT_ARCHIVABLE        = 0x4000;
        const long CRYPT_USER_PROTECTED    = 0x2;
        const long CRYPT_MODE_CBC          = 1;
        const long CRYPT_MACHINE_KEYSET    = 0x20;
        const long CRYPT_NEWKEYSET         = 0x8;
        const long CRYPT_DELETEKEYSET      = 0x10;
        const long CRYPT_DECRYPT           = 0x2;
        const long CRYPT_OID_INFO_NAME_KEY  = 0x2;
        const long CRYPT_EXPORT            = 0x4;
        const long CRYPT_FIRST             = 0x1;
        const long CRYPT_NO_SALT           = 0x10;

        const long PKCS7_PADDING           = 0x2;

        const long HP_HASHSIZE             = 0x4;
        const long HP_HASHVAL              = 0x2;

        const long AT_KEYEXCHANGE          = 0x1;
        const long AT_SIGNATURE            = 0x2;

        const long NTE_BAD_KEYSET          = 0x80090016;
        const long NTE_EXISTS              = 0x8009000F;
        const long NTE_NO_KEY              = 0x8009000D;

        const long PUBLICKEYBLOB           = 0x6;
        const long PRIVATEKEYBLOB          = 0x7;
        const long SIMPLEBLOB              = 0x1;

        const LPSTR MS_ENH_DSS_DH_PROV      = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider";
        const LPSTR MS_DEF_DSS_DH_PROV      = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider";
        const LPSTR MS_DEF_PROV             = "Microsoft Base Cryptographic Provider v1.0";
        const LPSTR MS_STRONG_PROV          = "Microsoft Strong Cryptographic Provider";
        const LPSTR MS_ENHANCED_PROV        = "Microsoft Enhanced Cryptographic Provider v1.0";
        const LPSTR MS_ENH_RSA_AES_PROV     = "Microsoft Enhanced RSA and AES Cryptographic Provider";
        const LPSTR MS_ENH_RSA_AES_PROV_XP  = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)";

        const long SC_CLOSE                = 0xF060;
        const long MF_BYCOMMAND            = 0x0;


        [entry("GetUserNameA"), usesgetlasterror] long GetUserNameA([in] LPSTR lpBuffer, [in] long * nSize);
        [entry("CryptAcquireContextA"), usesgetlasterror] long CryptAcquireContext([in] long * hProv, [in] LPSTR pszContainer, [in] LPSTR pszProvider, [in] long dwProvType, [in] long dwFlags);
        [entry("CryptReleaseContext"), usesgetlasterror] long CryptReleaseContext([in] long hProv, [in] long dwFlags);
        [entry("CryptGenRandom"), usesgetlasterror] long CryptGenRandom([in] long hProv, [in] long dwLen, [in] void * pbBuffer);
        [entry("CryptEncrypt"), usesgetlasterror] long CryptEncrypt([in] long hKey, [in] long hHash, [in] BOOL Final, [in] long dwFlags, [in] void * pbData, [in] long * pdwDataLen, [in] long dwBufLen);
        [entry("CryptDecrypt"), usesgetlasterror] long CryptDecrypt([in] long hKey, [in] long hHash, [in] BOOL Final, [in] long dwFlags, [in] void * pbData, [in] long * pdwDataLen);
        [entry("CryptSetKeyParam"), usesgetlasterror] long CryptSetKeyParam([in] long hKey, [in] long dwParam, [in] void * pbData, [in] long dwFlags);
        [entry("CryptImportKey"), usesgetlasterror] long CryptImportKey([in] long hProv, [in] void * pbData, [in] long dwDataLen, [in] long hPubKey, [in] long dwFlags, [in] long * phKey);
        [entry("CryptDestroyKey"), usesgetlasterror] long CryptDestroyKey([in] long hKey);
        [entry("CryptExportKey"), usesgetlasterror] long CryptExportKey([in] long hKey, [in] long hExpKey, [in] long dwBlobType, [in] long dwFlags, [in] void * pbData, [in] long * pdwDataLen);
        [entry("CryptCreateHash"), usesgetlasterror] long CryptCreateHash([in] long hProv, [in] long AlgId, [in] long hKey, [in] long dwFlags, [in] long * phHash);
        [entry("CryptHashData"), usesgetlasterror] long CryptHashData([in] long hHash, [in] void * pbData, [in] long dwDataLen, [in] long dwFlags);
        [entry("CryptDestroyHash"), usesgetlasterror] long CryptDestroyHash([in] long hHash);
        [entry("CryptGetHashParam"), usesgetlasterror] long CryptGetHashParam([in] long hHash, [in] long dwParam, [in] void * pbData, [in] long * pdwDataLen, [in] long dwFlags);
        [entry("CryptGetProvParam"), usesgetlasterror] long CryptGetProvParam([in] long hProv, [in] long dwParam, [in] void * pbData, [in] long * pdwDataLen, [in] long dwFlags);
        [entry("CryptGenKey"), usesgetlasterror] long CryptGenKey([in] long hProv, [in] long AlgId, [in] long dwFlags, [in] long * phKey);
        [entry("CryptEnumProvidersA"), usesgetlasterror] long CryptEnumProviders([in] long dwIndex, [in] void * pdwReserved, [in] long dwFlags, [in] long * pdwProvType, [in] LPSTR pszProvName, [in] long * pcbProvName);
        [entry("CryptGetUserKey"), usesgetlasterror] long CryptGetUserKey([in] long hProv, [in] long dwKeySpec, [in] long * phUserKey);
        [entry("CryptGetKeyParam"), usesgetlasterror] long CryptGetKeyParam([in] long hKey, [in] long dwParam, [in] void * pbData, [in] long * pdwDataLen, [in] long dwFlags);
        [entry("CryptVerifySignatureA"), usesgetlasterror] long CryptVerifySignature([in] long hHash, [in] void * pbSignature, [in] long dwSigLen, [in] long hPubKey, [in] LPSTR sDescription, [in] long dwFlats);
        [entry("CryptSetHashParam"), usesgetlasterror] long CryptSetHashParam([in] long hHash, [in] long dwParam, [in] void * pbData, [in] long dwFlags);
        [entry("CryptSignHashA"), usesgetlasterror] long CryptSignHash([in] long hHash, [in] long dwKeySpec, [in] LPSTR sDescription, [in] long dwFlags, [in] void * pbSignature, [in] long * pdwSigLen);
        [entry("RegOpenKeyExW")] long RegOpenKeyEx([in] long hKey, [in] LPWSTR lpSubKey, [in] long ulOptions, [in] long samDesired, [in] long * phkResult);
        [entry("RegCloseKey")] long RegCloseKey([in] long hKey);
        [entry("RegQueryInfoKeyW")] long RegQueryInfoKey([in] long hKey, [in] LPWSTR lpClass, [in] void * lpcClass, [in] long lpReserve, [in] void * lpcSubKeys, [in] void * lpcMaxSubKeyLen, [in] void * lpcMaxClassLen, [in] void * lpcValues, [in] void * lpcMaxValueNameLen, [in] void * lpcMaxValueLen, [in] void * lpcbSecurityDescriptor, [in] void * lpftLastWriteTime);
        [entry("RegCreateKeyExW")] long RegCreateKeyEx([in] long hKey, [in] LPWSTR lpSubKey, [in] long Reserved, [in] LPWSTR lpClass, [in] long dwOptions, [in] long samDesired, [in] long lpSecurityAttributes, [in] long * phkResult, [in] long * lpdwDisposition);
        [entry("RegDeleteKeyW")] long RegDeleteKey([in] long hKey, [in] LPWSTR lpSubKey);
        [entry("RegEnumKeyExW")] long RegEnumKeyEx([in] long hKey, [in] long dwIndex, [in] LPWSTR lpName, [in] long * lpcName, [in] long lpReserved, [in] LPWSTR lpClass, [in] long * lpcClass, [in] CURRENCY * lpftLastWriteTime);
        [entry("RegEnumValueW")] long RegEnumValue([in] long hKey, [in] long dwIndex, [in] LPWSTR lpName, [in] long * lpcValueName, [in] long lpReserved, [in] long lpType, [in] long lpData, [in] long lpcbData);
        [entry("RegSetValueExW")] long RegSetValueEx([in] long hKey, [in] LPWSTR lpValueName, [in] long Reserved, [in] long dwType, [in] long lpData, [in] long cbData);
        [entry("RegQueryValueExW")] long RegQueryValueEx([in] long hKey, [in] LPWSTR lpValueName, [in] long lpReserved, [in] long * lpType, [in] void * lpData, [in] long * lpcbData);
        [entry("RegFlushKey")] long RegFlushKey([in] long hKey);
        [entry("RegDeleteValueW")] long RegDeleteValue([in] long hKey, [in] LPWSTR lpValueName);
        [entry("RegConnectRegistryA")] long RegConnectRegistry([in] LPSTR lpMachineName, [in] long hKey, [in] long * phkResult);
        [entry("LookupAccountNameW"), usesgetlasterror] long LookupAccountNameW([in] LPWSTR lpSystemName, [in] LPWSTR lpAccountName, [in] long Sid, [in] long * cbSid, [in] LPWSTR ReferenceDomainName, [in] long * cbReferenceDomainName, [in] long * peUse);
    }

    [dllname("winmm.dll"), helpstring("Access to API functions within the winmm.dll system file.")]
    module winmm {
        [entry("timeGetTime")] long timeGetTime();
    }

    [dllname("user32.dll"), helpstring("Access to API functions within the User32.dll system file.")]
    module User32 {
        const long PICTYPE_ICON = 3;

        [entry("SendMessageTimeoutA"), usesgetlasterror] long  SendMessageTimeout([in] long hWnd, [in] long Msg, [in] long wParam, [in] long lParam, [in] long fuFlags, [in] long uTimeout, [in] long * lpdwResult);
        [entry("GetKeyState")] short GetKeyState([in] long nVirtKey);
        [entry("CharLowerA")] long  CharLower([in] long Char);
        [entry("SetTimer"), usesgetlasterror] long  SetTimer([in] long hwnd, [in] long nIDEvent, [in] long uElapse, [in] long lpTimerFunc);
        [entry("KillTimer"), usesgetlasterror] long  KillTimer([in] long hwnd, [in] long nIDEvent);
        [entry("CreateIconFromResource"), usesgetlasterror] long  CreateIconFromResource([in] byte * PresBits, [in] long dwResSize, [in] long fIcon, [in] long dwVer);
        [entry("GetIconInfo"), usesgetlasterror] long  GetIconInfo([in] long hIcon, [in] ICONINFO * pIconInfo);
        [entry("GetProcessWindowStation"), usesgetlasterror] long GetProcessWindowStation();
        [entry("GetUserObjectInformationW"), usesgetlasterror] long GetUserObjectInformationW([in] long hObj, [in] long nIndex, [in] LPVOID pvInfo, [in] long nLength, [in] long * lpnLengthNeeded);
        [entry("GetSystemMenu")] long GetSystemMenu([in] long hWnd, [in] BOOL bRevert);
        [entry("RemoveMenu"), usesgetlasterror] long RemoveMenu([in] long hMenu, [in] long nPosition, [in] long wFlags);
    }

    [dllname("shfolder.dll"), helpstring("Access to API functions in the Shfolder.dll system file.")]
    module Shfolder {
        [entry("SHGetFolderPathA")] HRESULT SHGetFolderPath([in] long Hwnd, [in] long nFolder, [in] long hToken, [in] long dwFlags, [in] LPSTR pszPath);
    }

    [dllname("secur32.dll")]
    module Secur32 {
        [entry("GetUserNameExW"), usesgetlasterror] long GetUserNameExW([in] long NameFormat, [in] LPWSTR lpNameBuffer, [in] long * nSize);
    }

    [dllname("psapi.dll")]
    module psapi {
        [entry("GetProcessMemoryInfo"), usesgetlasterror] long GetProcessMemoryInfo([in] long Process, [in] PROCESS_MEMORY_COUNTERS * ppsmemCounters, [in] long cb);
    }
    
    [dllname("msvbvm60.dll")]
    module VB6 {
        [entry("__vbaRefVarAry")] long vbaRefVarAry([in] VARIANT * ArrayToDeref);
    }
};

